/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : MySQL.g
 *     -                            On : 2015-12-10 14:46:30
 *     -                for the parser : MySQLParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
MySQLParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pMySQLParser, which is returned from a call to MySQLParserNew().
 *
 * The methods in pMySQLParser are  as follows:
 *
 *  - 
 MySQLParser_query_return
      pMySQLParser->query(pMySQLParser)
 *  - 
 MySQLParser_statement_return
      pMySQLParser->statement(pMySQLParser)
 *  - 
 MySQLParser_alter_statement_return
      pMySQLParser->alter_statement(pMySQLParser)
 *  - 
 MySQLParser_alter_database_return
      pMySQLParser->alter_database(pMySQLParser)
 *  - 
 MySQLParser_alter_event_return
      pMySQLParser->alter_event(pMySQLParser)
 *  - 
 MySQLParser_alter_log_file_group_return
      pMySQLParser->alter_log_file_group(pMySQLParser)
 *  - 
 MySQLParser_alter_server_return
      pMySQLParser->alter_server(pMySQLParser)
 *  - 
 MySQLParser_alter_table_return
      pMySQLParser->alter_table(pMySQLParser)
 *  - 
 MySQLParser_alter_table_commands_return
      pMySQLParser->alter_table_commands(pMySQLParser)
 *  - 
 MySQLParser_alter_table_list_item_return
      pMySQLParser->alter_table_list_item(pMySQLParser)
 *  - 
 MySQLParser_alter_table_list_entry_return
      pMySQLParser->alter_table_list_entry(pMySQLParser)
 *  - 
 MySQLParser_key_def_return
      pMySQLParser->key_def(pMySQLParser)
 *  - 
 MySQLParser_alter_order_by_return
      pMySQLParser->alter_order_by(pMySQLParser)
 *  - 
 MySQLParser_alter_algorithm_option_return
      pMySQLParser->alter_algorithm_option(pMySQLParser)
 *  - 
 MySQLParser_alter_lock_option_return
      pMySQLParser->alter_lock_option(pMySQLParser)
 *  - 
 MySQLParser_index_lock_algorithm_return
      pMySQLParser->index_lock_algorithm(pMySQLParser)
 *  - 
 MySQLParser_alter_partition_return
      pMySQLParser->alter_partition(pMySQLParser)
 *  - 
 MySQLParser_validation_return
      pMySQLParser->validation(pMySQLParser)
 *  - 
 MySQLParser_remove_partitioning_return
      pMySQLParser->remove_partitioning(pMySQLParser)
 *  - 
 MySQLParser_all_or_partition_name_list_return
      pMySQLParser->all_or_partition_name_list(pMySQLParser)
 *  - 
 MySQLParser_alter_tablespace_return
      pMySQLParser->alter_tablespace(pMySQLParser)
 *  - 
 MySQLParser_alter_tablespace_option_return
      pMySQLParser->alter_tablespace_option(pMySQLParser)
 *  - 
 MySQLParser_change_tablespace_option_return
      pMySQLParser->change_tablespace_option(pMySQLParser)
 *  - 
 MySQLParser_alter_view_return
      pMySQLParser->alter_view(pMySQLParser)
 *  - 
 MySQLParser_create_statement_return
      pMySQLParser->create_statement(pMySQLParser)
 *  - 
 MySQLParser_create_database_return
      pMySQLParser->create_database(pMySQLParser)
 *  - 
 MySQLParser_create_database_tail_return
      pMySQLParser->create_database_tail(pMySQLParser)
 *  - 
 MySQLParser_create_with_definer_return
      pMySQLParser->create_with_definer(pMySQLParser)
 *  - 
 MySQLParser_create_event_return
      pMySQLParser->create_event(pMySQLParser)
 *  - 
 MySQLParser_create_event_tail_return
      pMySQLParser->create_event_tail(pMySQLParser)
 *  - 
 MySQLParser_create_routine_return
      pMySQLParser->create_routine(pMySQLParser)
 *  - 
 MySQLParser_create_procedure_return
      pMySQLParser->create_procedure(pMySQLParser)
 *  - 
 MySQLParser_create_function_return
      pMySQLParser->create_function(pMySQLParser)
 *  - 
 MySQLParser_create_routine_or_udf_return
      pMySQLParser->create_routine_or_udf(pMySQLParser)
 *  - 
 MySQLParser_procedure_body_return
      pMySQLParser->procedure_body(pMySQLParser)
 *  - 
 MySQLParser_function_body_return
      pMySQLParser->function_body(pMySQLParser)
 *  - 
 MySQLParser_udf_tail_return
      pMySQLParser->udf_tail(pMySQLParser)
 *  - 
 MySQLParser_routine_create_options_return
      pMySQLParser->routine_create_options(pMySQLParser)
 *  - 
 MySQLParser_routine_create_option_return
      pMySQLParser->routine_create_option(pMySQLParser)
 *  - 
 MySQLParser_routine_alter_options_return
      pMySQLParser->routine_alter_options(pMySQLParser)
 *  - 
 MySQLParser_routine_option_return
      pMySQLParser->routine_option(pMySQLParser)
 *  - 
 MySQLParser_create_index_return
      pMySQLParser->create_index(pMySQLParser)
 *  - 
 MySQLParser_create_index_tail_return
      pMySQLParser->create_index_tail(pMySQLParser)
 *  - 
 MySQLParser_create_index_target_return
      pMySQLParser->create_index_target(pMySQLParser)
 *  - 
 MySQLParser_create_logfile_group_return
      pMySQLParser->create_logfile_group(pMySQLParser)
 *  - 
 MySQLParser_create_logfile_group_tail_return
      pMySQLParser->create_logfile_group_tail(pMySQLParser)
 *  - 
 MySQLParser_logfile_group_options_return
      pMySQLParser->logfile_group_options(pMySQLParser)
 *  - 
 MySQLParser_logfile_group_option_return
      pMySQLParser->logfile_group_option(pMySQLParser)
 *  - 
 MySQLParser_create_server_return
      pMySQLParser->create_server(pMySQLParser)
 *  - 
 MySQLParser_create_server_tail_return
      pMySQLParser->create_server_tail(pMySQLParser)
 *  - 
 MySQLParser_server_options_return
      pMySQLParser->server_options(pMySQLParser)
 *  - 
 MySQLParser_server_option_return
      pMySQLParser->server_option(pMySQLParser)
 *  - 
 MySQLParser_create_table_return
      pMySQLParser->create_table(pMySQLParser)
 *  - 
 MySQLParser_create_table_tail_return
      pMySQLParser->create_table_tail(pMySQLParser)
 *  - 
 MySQLParser_create_field_list_return
      pMySQLParser->create_field_list(pMySQLParser)
 *  - 
 MySQLParser_create_item_return
      pMySQLParser->create_item(pMySQLParser)
 *  - 
 MySQLParser_create_field_list_item_return
      pMySQLParser->create_field_list_item(pMySQLParser)
 *  - 
 MySQLParser_table_creation_source_return
      pMySQLParser->table_creation_source(pMySQLParser)
 *  - 
 MySQLParser_create_select_return
      pMySQLParser->create_select(pMySQLParser)
 *  - 
 MySQLParser_create_tablespace_return
      pMySQLParser->create_tablespace(pMySQLParser)
 *  - 
 MySQLParser_create_tablespace_tail_return
      pMySQLParser->create_tablespace_tail(pMySQLParser)
 *  - 
 MySQLParser_tablespace_options_return
      pMySQLParser->tablespace_options(pMySQLParser)
 *  - 
 MySQLParser_tablespace_option_return
      pMySQLParser->tablespace_option(pMySQLParser)
 *  - 
 MySQLParser_create_trigger_return
      pMySQLParser->create_trigger(pMySQLParser)
 *  - 
 MySQLParser_create_trigger_tail_return
      pMySQLParser->create_trigger_tail(pMySQLParser)
 *  - 
 MySQLParser_trigger_follows_precedes_clause_return
      pMySQLParser->trigger_follows_precedes_clause(pMySQLParser)
 *  - 
 MySQLParser_create_view_return
      pMySQLParser->create_view(pMySQLParser)
 *  - 
 MySQLParser_create_view_tail_return
      pMySQLParser->create_view_tail(pMySQLParser)
 *  - 
 MySQLParser_view_replace_or_algorithm_return
      pMySQLParser->view_replace_or_algorithm(pMySQLParser)
 *  - 
 MySQLParser_view_algorithm_return
      pMySQLParser->view_algorithm(pMySQLParser)
 *  - 
 MySQLParser_drop_statement_return
      pMySQLParser->drop_statement(pMySQLParser)
 *  - 
 MySQLParser_drop_logfile_group_option_return
      pMySQLParser->drop_logfile_group_option(pMySQLParser)
 *  - 
 MySQLParser_rename_table_statement_return
      pMySQLParser->rename_table_statement(pMySQLParser)
 *  - 
 MySQLParser_truncate_table_statement_return
      pMySQLParser->truncate_table_statement(pMySQLParser)
 *  - 
 MySQLParser_call_statement_return
      pMySQLParser->call_statement(pMySQLParser)
 *  - 
 MySQLParser_delete_statement_return
      pMySQLParser->delete_statement(pMySQLParser)
 *  - 
 MySQLParser_partition_delete_return
      pMySQLParser->partition_delete(pMySQLParser)
 *  - 
 MySQLParser_delete_option_return
      pMySQLParser->delete_option(pMySQLParser)
 *  - 
 MySQLParser_do_statement_return
      pMySQLParser->do_statement(pMySQLParser)
 *  - 
 MySQLParser_handler_statement_return
      pMySQLParser->handler_statement(pMySQLParser)
 *  - 
 MySQLParser_handler_read_or_scan_return
      pMySQLParser->handler_read_or_scan(pMySQLParser)
 *  - 
 MySQLParser_insert_statement_return
      pMySQLParser->insert_statement(pMySQLParser)
 *  - 
 MySQLParser_insert_lock_option_return
      pMySQLParser->insert_lock_option(pMySQLParser)
 *  - 
 MySQLParser_insert_field_spec_return
      pMySQLParser->insert_field_spec(pMySQLParser)
 *  - 
 MySQLParser_fields_return
      pMySQLParser->fields(pMySQLParser)
 *  - 
 MySQLParser_insert_identifier_return
      pMySQLParser->insert_identifier(pMySQLParser)
 *  - 
 MySQLParser_insert_values_return
      pMySQLParser->insert_values(pMySQLParser)
 *  - 
 MySQLParser_insert_query_expression_return
      pMySQLParser->insert_query_expression(pMySQLParser)
 *  - 
 MySQLParser_insert_value_list_return
      pMySQLParser->insert_value_list(pMySQLParser)
 *  - 
 MySQLParser_values_return
      pMySQLParser->values(pMySQLParser)
 *  - 
 MySQLParser_duplicate_key_update_return
      pMySQLParser->duplicate_key_update(pMySQLParser)
 *  - 
 MySQLParser_load_statement_return
      pMySQLParser->load_statement(pMySQLParser)
 *  - 
 MySQLParser_data_or_xml_return
      pMySQLParser->data_or_xml(pMySQLParser)
 *  - 
 MySQLParser_xml_rows_identified_by_return
      pMySQLParser->xml_rows_identified_by(pMySQLParser)
 *  - 
 MySQLParser_load_data_file_tail_return
      pMySQLParser->load_data_file_tail(pMySQLParser)
 *  - 
 MySQLParser_load_data_file_target_list_return
      pMySQLParser->load_data_file_target_list(pMySQLParser)
 *  - 
 MySQLParser_field_or_variable_list_return
      pMySQLParser->field_or_variable_list(pMySQLParser)
 *  - 
 MySQLParser_replace_statement_return
      pMySQLParser->replace_statement(pMySQLParser)
 *  - 
 MySQLParser_select_statement_return
      pMySQLParser->select_statement(pMySQLParser)
 *  - 
 MySQLParser_select_paren_return
      pMySQLParser->select_paren(pMySQLParser)
 *  - 
 MySQLParser_select_from_return
      pMySQLParser->select_from(pMySQLParser)
 *  - 
 MySQLParser_select_part2_return
      pMySQLParser->select_part2(pMySQLParser)
 *  - 
 MySQLParser_table_expression_return
      pMySQLParser->table_expression(pMySQLParser)
 *  - 
 MySQLParser_subquery_return
      pMySQLParser->subquery(pMySQLParser)
 *  - 
 MySQLParser_query_expression_body_return
      pMySQLParser->query_expression_body(pMySQLParser)
 *  - 
 MySQLParser_select_part2_derived_return
      pMySQLParser->select_part2_derived(pMySQLParser)
 *  - 
 MySQLParser_select_option_return
      pMySQLParser->select_option(pMySQLParser)
 *  - 
 MySQLParser_query_spec_option_return
      pMySQLParser->query_spec_option(pMySQLParser)
 *  - 
 MySQLParser_select_item_list_return
      pMySQLParser->select_item_list(pMySQLParser)
 *  - 
 MySQLParser_select_item_return
      pMySQLParser->select_item(pMySQLParser)
 *  - 
 MySQLParser_select_alias_return
      pMySQLParser->select_alias(pMySQLParser)
 *  - 
 MySQLParser_limit_clause_return
      pMySQLParser->limit_clause(pMySQLParser)
 *  - 
 MySQLParser_simple_limit_clause_return
      pMySQLParser->simple_limit_clause(pMySQLParser)
 *  - 
 MySQLParser_limit_options_return
      pMySQLParser->limit_options(pMySQLParser)
 *  - 
 MySQLParser_limit_option_return
      pMySQLParser->limit_option(pMySQLParser)
 *  - 
 MySQLParser_into_clause_return
      pMySQLParser->into_clause(pMySQLParser)
 *  - 
 MySQLParser_procedure_analyse_clause_return
      pMySQLParser->procedure_analyse_clause(pMySQLParser)
 *  - 
 MySQLParser_having_clause_return
      pMySQLParser->having_clause(pMySQLParser)
 *  - 
 MySQLParser_group_by_clause_return
      pMySQLParser->group_by_clause(pMySQLParser)
 *  - 
 MySQLParser_olap_option_return
      pMySQLParser->olap_option(pMySQLParser)
 *  - 
 MySQLParser_order_by_clause_return
      pMySQLParser->order_by_clause(pMySQLParser)
 *  - 
 MySQLParser_order_by_or_limit_return
      pMySQLParser->order_by_or_limit(pMySQLParser)
 *  - 
 MySQLParser_direction_return
      pMySQLParser->direction(pMySQLParser)
 *  - 
 MySQLParser_from_clause_return
      pMySQLParser->from_clause(pMySQLParser)
 *  - 
 MySQLParser_where_clause_return
      pMySQLParser->where_clause(pMySQLParser)
 *  - 
 MySQLParser_table_reference_list_return
      pMySQLParser->table_reference_list(pMySQLParser)
 *  - 
 MySQLParser_join_table_list_return
      pMySQLParser->join_table_list(pMySQLParser)
 *  - 
 MySQLParser_escaped_table_reference_return
      pMySQLParser->escaped_table_reference(pMySQLParser)
 *  - 
 MySQLParser_table_reference_return
      pMySQLParser->table_reference(pMySQLParser)
 *  - 
 MySQLParser_join_return
      pMySQLParser->join(pMySQLParser)
 *  - 
 MySQLParser_table_factor_return
      pMySQLParser->table_factor(pMySQLParser)
 *  - 
 MySQLParser_select_table_factor_union_return
      pMySQLParser->select_table_factor_union(pMySQLParser)
 *  - 
 MySQLParser_query_specification_return
      pMySQLParser->query_specification(pMySQLParser)
 *  - 
 MySQLParser_join_table_return
      pMySQLParser->join_table(pMySQLParser)
 *  - 
 MySQLParser_join_condition_return
      pMySQLParser->join_condition(pMySQLParser)
 *  - 
 MySQLParser_union_clause_return
      pMySQLParser->union_clause(pMySQLParser)
 *  - 
 MySQLParser_union_option_return
      pMySQLParser->union_option(pMySQLParser)
 *  - 
 MySQLParser_union_or_order_by_or_limit_return
      pMySQLParser->union_or_order_by_or_limit(pMySQLParser)
 *  - 
 MySQLParser_select_lock_type_return
      pMySQLParser->select_lock_type(pMySQLParser)
 *  - 
 MySQLParser_table_alias_return
      pMySQLParser->table_alias(pMySQLParser)
 *  - 
 MySQLParser_index_hint_list_return
      pMySQLParser->index_hint_list(pMySQLParser)
 *  - 
 MySQLParser_index_hint_return
      pMySQLParser->index_hint(pMySQLParser)
 *  - 
 MySQLParser_index_hint_type_return
      pMySQLParser->index_hint_type(pMySQLParser)
 *  - 
 MySQLParser_key_or_index_return
      pMySQLParser->key_or_index(pMySQLParser)
 *  - 
 MySQLParser_index_hint_clause_return
      pMySQLParser->index_hint_clause(pMySQLParser)
 *  - 
 MySQLParser_index_list_return
      pMySQLParser->index_list(pMySQLParser)
 *  - 
 MySQLParser_index_list_element_return
      pMySQLParser->index_list_element(pMySQLParser)
 *  - 
 MySQLParser_update_statement_return
      pMySQLParser->update_statement(pMySQLParser)
 *  - 
 MySQLParser_transaction_or_locking_statement_return
      pMySQLParser->transaction_or_locking_statement(pMySQLParser)
 *  - 
 MySQLParser_transaction_statement_return
      pMySQLParser->transaction_statement(pMySQLParser)
 *  - 
 MySQLParser_transaction_characteristic_return
      pMySQLParser->transaction_characteristic(pMySQLParser)
 *  - 
 MySQLParser_set_transaction_characteristic_return
      pMySQLParser->set_transaction_characteristic(pMySQLParser)
 *  - 
 MySQLParser_isolation_level_return
      pMySQLParser->isolation_level(pMySQLParser)
 *  - 
 MySQLParser_savepoint_statement_return
      pMySQLParser->savepoint_statement(pMySQLParser)
 *  - 
 MySQLParser_lock_statement_return
      pMySQLParser->lock_statement(pMySQLParser)
 *  - 
 MySQLParser_lock_item_return
      pMySQLParser->lock_item(pMySQLParser)
 *  - 
 MySQLParser_lock_option_return
      pMySQLParser->lock_option(pMySQLParser)
 *  - 
 MySQLParser_xa_statement_return
      pMySQLParser->xa_statement(pMySQLParser)
 *  - 
 MySQLParser_xa_convert_return
      pMySQLParser->xa_convert(pMySQLParser)
 *  - 
 MySQLParser_xid_return
      pMySQLParser->xid(pMySQLParser)
 *  - 
 MySQLParser_replication_statement_return
      pMySQLParser->replication_statement(pMySQLParser)
 *  - 
 MySQLParser_replication_load_return
      pMySQLParser->replication_load(pMySQLParser)
 *  - 
 MySQLParser_change_master_return
      pMySQLParser->change_master(pMySQLParser)
 *  - 
 MySQLParser_change_master_options_return
      pMySQLParser->change_master_options(pMySQLParser)
 *  - 
 MySQLParser_master_option_return
      pMySQLParser->master_option(pMySQLParser)
 *  - 
 MySQLParser_master_file_def_return
      pMySQLParser->master_file_def(pMySQLParser)
 *  - 
 MySQLParser_server_id_list_return
      pMySQLParser->server_id_list(pMySQLParser)
 *  - 
 MySQLParser_change_replication_return
      pMySQLParser->change_replication(pMySQLParser)
 *  - 
 MySQLParser_filter_definition_return
      pMySQLParser->filter_definition(pMySQLParser)
 *  - 
 MySQLParser_filter_db_list_return
      pMySQLParser->filter_db_list(pMySQLParser)
 *  - 
 MySQLParser_filter_table_list_return
      pMySQLParser->filter_table_list(pMySQLParser)
 *  - 
 MySQLParser_filter_string_list_return
      pMySQLParser->filter_string_list(pMySQLParser)
 *  - 
 MySQLParser_filter_wild_db_table_string_return
      pMySQLParser->filter_wild_db_table_string(pMySQLParser)
 *  - 
 MySQLParser_filter_db_pair_list_return
      pMySQLParser->filter_db_pair_list(pMySQLParser)
 *  - 
 MySQLParser_slave_return
      pMySQLParser->slave(pMySQLParser)
 *  - 
 MySQLParser_slave_until_options_return
      pMySQLParser->slave_until_options(pMySQLParser)
 *  - 
 MySQLParser_slave_connection_options_return
      pMySQLParser->slave_connection_options(pMySQLParser)
 *  - 
 MySQLParser_slave_thread_options_return
      pMySQLParser->slave_thread_options(pMySQLParser)
 *  - 
 MySQLParser_slave_thread_option_return
      pMySQLParser->slave_thread_option(pMySQLParser)
 *  - 
 MySQLParser_group_replication_return
      pMySQLParser->group_replication(pMySQLParser)
 *  - 
 MySQLParser_prepared_statement_return
      pMySQLParser->prepared_statement(pMySQLParser)
 *  - 
 MySQLParser_execute_statement_return
      pMySQLParser->execute_statement(pMySQLParser)
 *  - 
 MySQLParser_execute_var_list_return
      pMySQLParser->execute_var_list(pMySQLParser)
 *  - 
 MySQLParser_account_management_statement_return
      pMySQLParser->account_management_statement(pMySQLParser)
 *  - 
 MySQLParser_alter_user_return
      pMySQLParser->alter_user(pMySQLParser)
 *  - 
 MySQLParser_alter_user_tail_return
      pMySQLParser->alter_user_tail(pMySQLParser)
 *  - 
 MySQLParser_create_user_return
      pMySQLParser->create_user(pMySQLParser)
 *  - 
 MySQLParser_create_user_tail_return
      pMySQLParser->create_user_tail(pMySQLParser)
 *  - 
 MySQLParser_require_clause_return
      pMySQLParser->require_clause(pMySQLParser)
 *  - 
 MySQLParser_connect_options_return
      pMySQLParser->connect_options(pMySQLParser)
 *  - 
 MySQLParser_account_lock_password_expire_options_return
      pMySQLParser->account_lock_password_expire_options(pMySQLParser)
 *  - 
 MySQLParser_drop_user_return
      pMySQLParser->drop_user(pMySQLParser)
 *  - 
 MySQLParser_parse_grant_return
      pMySQLParser->parse_grant(pMySQLParser)
 *  - 
 MySQLParser_grant_return
      pMySQLParser->grant(pMySQLParser)
 *  - 
 MySQLParser_grant_proxy_return
      pMySQLParser->grant_proxy(pMySQLParser)
 *  - 
 MySQLParser_rename_user_return
      pMySQLParser->rename_user(pMySQLParser)
 *  - 
 MySQLParser_revoke_statement_return
      pMySQLParser->revoke_statement(pMySQLParser)
 *  - 
 MySQLParser_privilege_target_return
      pMySQLParser->privilege_target(pMySQLParser)
 *  - 
 MySQLParser_set_password_return
      pMySQLParser->set_password(pMySQLParser)
 *  - 
 MySQLParser_grant_object_type_return
      pMySQLParser->grant_object_type(pMySQLParser)
 *  - 
 MySQLParser_grant_privileges_return
      pMySQLParser->grant_privileges(pMySQLParser)
 *  - 
 MySQLParser_privilege_type_return
      pMySQLParser->privilege_type(pMySQLParser)
 *  - 
 MySQLParser_privilege_level_return
      pMySQLParser->privilege_level(pMySQLParser)
 *  - 
 MySQLParser_require_list_return
      pMySQLParser->require_list(pMySQLParser)
 *  - 
 MySQLParser_require_list_element_return
      pMySQLParser->require_list_element(pMySQLParser)
 *  - 
 MySQLParser_grant_option_return
      pMySQLParser->grant_option(pMySQLParser)
 *  - 
 MySQLParser_table_administration_statement_return
      pMySQLParser->table_administration_statement(pMySQLParser)
 *  - 
 MySQLParser_check_option_return
      pMySQLParser->check_option(pMySQLParser)
 *  - 
 MySQLParser_repair_option_return
      pMySQLParser->repair_option(pMySQLParser)
 *  - 
 MySQLParser_install_uninstall_statment_return
      pMySQLParser->install_uninstall_statment(pMySQLParser)
 *  - 
 MySQLParser_set_statement_return
      pMySQLParser->set_statement(pMySQLParser)
 *  - 
 MySQLParser_option_value_no_option_type_return
      pMySQLParser->option_value_no_option_type(pMySQLParser)
 *  - 
 MySQLParser_option_value_following_option_type_return
      pMySQLParser->option_value_following_option_type(pMySQLParser)
 *  - 
 MySQLParser_set_expression_or_default_return
      pMySQLParser->set_expression_or_default(pMySQLParser)
 *  - 
 MySQLParser_option_value_list_return
      pMySQLParser->option_value_list(pMySQLParser)
 *  - 
 MySQLParser_option_value_return
      pMySQLParser->option_value(pMySQLParser)
 *  - 
 MySQLParser_show_statement_return
      pMySQLParser->show_statement(pMySQLParser)
 *  - 
 MySQLParser_non_blocking_return
      pMySQLParser->non_blocking(pMySQLParser)
 *  - 
 MySQLParser_from_or_in_return
      pMySQLParser->from_or_in(pMySQLParser)
 *  - 
 MySQLParser_in_db_return
      pMySQLParser->in_db(pMySQLParser)
 *  - 
 MySQLParser_profile_type_return
      pMySQLParser->profile_type(pMySQLParser)
 *  - 
 MySQLParser_other_administrative_statement_return
      pMySQLParser->other_administrative_statement(pMySQLParser)
 *  - 
 MySQLParser_key_cache_list_or_parts_return
      pMySQLParser->key_cache_list_or_parts(pMySQLParser)
 *  - 
 MySQLParser_key_cache_list_return
      pMySQLParser->key_cache_list(pMySQLParser)
 *  - 
 MySQLParser_assign_to_keycache_return
      pMySQLParser->assign_to_keycache(pMySQLParser)
 *  - 
 MySQLParser_assign_to_keycache_partition_return
      pMySQLParser->assign_to_keycache_partition(pMySQLParser)
 *  - 
 MySQLParser_cache_keys_spec_return
      pMySQLParser->cache_keys_spec(pMySQLParser)
 *  - 
 MySQLParser_key_usage_element_return
      pMySQLParser->key_usage_element(pMySQLParser)
 *  - 
 MySQLParser_flush_option_return
      pMySQLParser->flush_option(pMySQLParser)
 *  - 
 MySQLParser_log_type_return
      pMySQLParser->log_type(pMySQLParser)
 *  - 
 MySQLParser_flush_tables_return
      pMySQLParser->flush_tables(pMySQLParser)
 *  - 
 MySQLParser_flush_tables_options_return
      pMySQLParser->flush_tables_options(pMySQLParser)
 *  - 
 MySQLParser_load_table_index_list_return
      pMySQLParser->load_table_index_list(pMySQLParser)
 *  - 
 MySQLParser_load_table_index_partion_return
      pMySQLParser->load_table_index_partion(pMySQLParser)
 *  - 
 MySQLParser_reset_option_return
      pMySQLParser->reset_option(pMySQLParser)
 *  - 
 MySQLParser_utility_statement_return
      pMySQLParser->utility_statement(pMySQLParser)
 *  - 
 MySQLParser_describe_command_return
      pMySQLParser->describe_command(pMySQLParser)
 *  - 
 MySQLParser_explainable_statement_return
      pMySQLParser->explainable_statement(pMySQLParser)
 *  - 
 MySQLParser_use_command_return
      pMySQLParser->use_command(pMySQLParser)
 *  - 
 MySQLParser_expression_return
      pMySQLParser->expression(pMySQLParser)
 *  - 
 MySQLParser_logical_or_expression_return
      pMySQLParser->logical_or_expression(pMySQLParser)
 *  - 
 MySQLParser_logical_xor_expression_return
      pMySQLParser->logical_xor_expression(pMySQLParser)
 *  - 
 MySQLParser_logical_and_expression_return
      pMySQLParser->logical_and_expression(pMySQLParser)
 *  - 
 MySQLParser_logical_not_expression_return
      pMySQLParser->logical_not_expression(pMySQLParser)
 *  - 
 MySQLParser_boolean_primary_expression_return
      pMySQLParser->boolean_primary_expression(pMySQLParser)
 *  - 
 MySQLParser_predicate_return
      pMySQLParser->predicate(pMySQLParser)
 *  - 
 MySQLParser_predicate_in_return
      pMySQLParser->predicate_in(pMySQLParser)
 *  - 
 MySQLParser_bitwise_or_expression_return
      pMySQLParser->bitwise_or_expression(pMySQLParser)
 *  - 
 MySQLParser_bitwise_and_expression_return
      pMySQLParser->bitwise_and_expression(pMySQLParser)
 *  - 
 MySQLParser_shift_expression_return
      pMySQLParser->shift_expression(pMySQLParser)
 *  - 
 MySQLParser_additive_expression_return
      pMySQLParser->additive_expression(pMySQLParser)
 *  - 
 MySQLParser_multiplicative_expression_return
      pMySQLParser->multiplicative_expression(pMySQLParser)
 *  - 
 MySQLParser_bitwise_xor_expression_return
      pMySQLParser->bitwise_xor_expression(pMySQLParser)
 *  - 
 MySQLParser_concat_expression_return
      pMySQLParser->concat_expression(pMySQLParser)
 *  - 
 MySQLParser_unary_expression_return
      pMySQLParser->unary_expression(pMySQLParser)
 *  - 
 MySQLParser_not_expression_return
      pMySQLParser->not_expression(pMySQLParser)
 *  - 
 MySQLParser_interval_expression_return
      pMySQLParser->interval_expression(pMySQLParser)
 *  - 
 MySQLParser_interval_function_return
      pMySQLParser->interval_function(pMySQLParser)
 *  - 
 MySQLParser_interval_time_span_return
      pMySQLParser->interval_time_span(pMySQLParser)
 *  - 
 MySQLParser_primary_return
      pMySQLParser->primary(pMySQLParser)
 *  - 
 MySQLParser_expression_with_nested_parentheses_return
      pMySQLParser->expression_with_nested_parentheses(pMySQLParser)
 *  - 
 MySQLParser_comparison_operator_return
      pMySQLParser->comparison_operator(pMySQLParser)
 *  - 
 MySQLParser_multiplication_operator_return
      pMySQLParser->multiplication_operator(pMySQLParser)
 *  - 
 MySQLParser_runtime_function_call_return
      pMySQLParser->runtime_function_call(pMySQLParser)
 *  - 
 MySQLParser_runtime_function_call_expression_return
      pMySQLParser->runtime_function_call_expression(pMySQLParser)
 *  - 
 MySQLParser_time_function_parameters_return
      pMySQLParser->time_function_parameters(pMySQLParser)
 *  - 
 MySQLParser_fractional_precision_return
      pMySQLParser->fractional_precision(pMySQLParser)
 *  - 
 MySQLParser_weight_string_levels_return
      pMySQLParser->weight_string_levels(pMySQLParser)
 *  - 
 MySQLParser_weight_string_level_list_item_return
      pMySQLParser->weight_string_level_list_item(pMySQLParser)
 *  - 
 MySQLParser_date_time_type_return
      pMySQLParser->date_time_type(pMySQLParser)
 *  - 
 MySQLParser_trim_function_return
      pMySQLParser->trim_function(pMySQLParser)
 *  - 
 MySQLParser_substring_function_return
      pMySQLParser->substring_function(pMySQLParser)
 *  - 
 MySQLParser_geometry_function_return
      pMySQLParser->geometry_function(pMySQLParser)
 *  - 
 MySQLParser_aggregate_function_return
      pMySQLParser->aggregate_function(pMySQLParser)
 *  - 
 MySQLParser_in_aggregate_expression_return
      pMySQLParser->in_aggregate_expression(pMySQLParser)
 *  - 
 MySQLParser_count_function_return
      pMySQLParser->count_function(pMySQLParser)
 *  - 
 MySQLParser_udf_call_return
      pMySQLParser->udf_call(pMySQLParser)
 *  - 
 MySQLParser_udf_call_expression_return
      pMySQLParser->udf_call_expression(pMySQLParser)
 *  - 
 MySQLParser_stored_function_call_return
      pMySQLParser->stored_function_call(pMySQLParser)
 *  - 
 MySQLParser_stored_function_call_expression_return
      pMySQLParser->stored_function_call_expression(pMySQLParser)
 *  - 
 MySQLParser_aliased_expression_list_return
      pMySQLParser->aliased_expression_list(pMySQLParser)
 *  - 
 MySQLParser_aliased_expression_return
      pMySQLParser->aliased_expression(pMySQLParser)
 *  - 
 MySQLParser_variable_return
      pMySQLParser->variable(pMySQLParser)
 *  - 
 MySQLParser_user_variable_return
      pMySQLParser->user_variable(pMySQLParser)
 *  - 
 MySQLParser_system_variable_return
      pMySQLParser->system_variable(pMySQLParser)
 *  - 
 MySQLParser_variable_name_return
      pMySQLParser->variable_name(pMySQLParser)
 *  - 
 MySQLParser_match_expression_return
      pMySQLParser->match_expression(pMySQLParser)
 *  - 
 MySQLParser_case_expression_return
      pMySQLParser->case_expression(pMySQLParser)
 *  - 
 MySQLParser_when_expression_return
      pMySQLParser->when_expression(pMySQLParser)
 *  - 
 MySQLParser_then_expression_return
      pMySQLParser->then_expression(pMySQLParser)
 *  - 
 MySQLParser_else_expression_return
      pMySQLParser->else_expression(pMySQLParser)
 *  - 
 MySQLParser_cast_expression_return
      pMySQLParser->cast_expression(pMySQLParser)
 *  - 
 MySQLParser_cast_type_return
      pMySQLParser->cast_type(pMySQLParser)
 *  - 
 MySQLParser_encoding_return
      pMySQLParser->encoding(pMySQLParser)
 *  - 
 MySQLParser_charset_return
      pMySQLParser->charset(pMySQLParser)
 *  - 
 MySQLParser_not_rule_return
      pMySQLParser->not_rule(pMySQLParser)
 *  - 
 MySQLParser_not2_rule_return
      pMySQLParser->not2_rule(pMySQLParser)
 *  - 
 MySQLParser_or_rule_return
      pMySQLParser->or_rule(pMySQLParser)
 *  - 
 MySQLParser_xor_rule_return
      pMySQLParser->xor_rule(pMySQLParser)
 *  - 
 MySQLParser_and_rule_return
      pMySQLParser->and_rule(pMySQLParser)
 *  - 
 MySQLParser_interval_return
      pMySQLParser->interval(pMySQLParser)
 *  - 
 MySQLParser_interval_unit_return
      pMySQLParser->interval_unit(pMySQLParser)
 *  - 
 MySQLParser_interval_timestamp_unit_return
      pMySQLParser->interval_timestamp_unit(pMySQLParser)
 *  - 
 MySQLParser_expression_list_with_parentheses_return
      pMySQLParser->expression_list_with_parentheses(pMySQLParser)
 *  - 
 MySQLParser_optional_expression_list_with_parentheses_return
      pMySQLParser->optional_expression_list_with_parentheses(pMySQLParser)
 *  - 
 MySQLParser_expression_list_return
      pMySQLParser->expression_list(pMySQLParser)
 *  - 
 MySQLParser_expression_list_with_direction_return
      pMySQLParser->expression_list_with_direction(pMySQLParser)
 *  - 
 MySQLParser_channel_return
      pMySQLParser->channel(pMySQLParser)
 *  - 
 MySQLParser_compound_statement_return
      pMySQLParser->compound_statement(pMySQLParser)
 *  - 
 MySQLParser_compound_statement_list_return
      pMySQLParser->compound_statement_list(pMySQLParser)
 *  - 
 MySQLParser_label_return
      pMySQLParser->label(pMySQLParser)
 *  - 
 MySQLParser_label_identifier_return
      pMySQLParser->label_identifier(pMySQLParser)
 *  - 
 MySQLParser_begin_end_block_return
      pMySQLParser->begin_end_block(pMySQLParser)
 *  - 
 MySQLParser_loop_block_return
      pMySQLParser->loop_block(pMySQLParser)
 *  - 
 MySQLParser_repeat_until_block_return
      pMySQLParser->repeat_until_block(pMySQLParser)
 *  - 
 MySQLParser_while_do_block_return
      pMySQLParser->while_do_block(pMySQLParser)
 *  - 
 MySQLParser_declarations_return
      pMySQLParser->declarations(pMySQLParser)
 *  - 
 MySQLParser_variable_declaration_return
      pMySQLParser->variable_declaration(pMySQLParser)
 *  - 
 MySQLParser_condition_declaration_return
      pMySQLParser->condition_declaration(pMySQLParser)
 *  - 
 MySQLParser_sp_condition_return
      pMySQLParser->sp_condition(pMySQLParser)
 *  - 
 MySQLParser_sqlstate_return
      pMySQLParser->sqlstate(pMySQLParser)
 *  - 
 MySQLParser_cursor_declaration_return
      pMySQLParser->cursor_declaration(pMySQLParser)
 *  - 
 MySQLParser_handler_declaration_return
      pMySQLParser->handler_declaration(pMySQLParser)
 *  - 
 MySQLParser_handler_condition_return
      pMySQLParser->handler_condition(pMySQLParser)
 *  - 
 MySQLParser_case_statement_return
      pMySQLParser->case_statement(pMySQLParser)
 *  - 
 MySQLParser_then_statement_return
      pMySQLParser->then_statement(pMySQLParser)
 *  - 
 MySQLParser_else_statement_return
      pMySQLParser->else_statement(pMySQLParser)
 *  - 
 MySQLParser_if_statement_return
      pMySQLParser->if_statement(pMySQLParser)
 *  - 
 MySQLParser_if_body_return
      pMySQLParser->if_body(pMySQLParser)
 *  - 
 MySQLParser_iterate_statement_return
      pMySQLParser->iterate_statement(pMySQLParser)
 *  - 
 MySQLParser_leave_statement_return
      pMySQLParser->leave_statement(pMySQLParser)
 *  - 
 MySQLParser_return_statement_return
      pMySQLParser->return_statement(pMySQLParser)
 *  - 
 MySQLParser_get_diagnostics_return
      pMySQLParser->get_diagnostics(pMySQLParser)
 *  - 
 MySQLParser_signal_allowed_expression_return
      pMySQLParser->signal_allowed_expression(pMySQLParser)
 *  - 
 MySQLParser_statement_information_item_return
      pMySQLParser->statement_information_item(pMySQLParser)
 *  - 
 MySQLParser_condition_information_item_return
      pMySQLParser->condition_information_item(pMySQLParser)
 *  - 
 MySQLParser_signal_information_item_name_return
      pMySQLParser->signal_information_item_name(pMySQLParser)
 *  - 
 MySQLParser_signal_statement_return
      pMySQLParser->signal_statement(pMySQLParser)
 *  - 
 MySQLParser_resignal_statement_return
      pMySQLParser->resignal_statement(pMySQLParser)
 *  - 
 MySQLParser_signal_information_item_return
      pMySQLParser->signal_information_item(pMySQLParser)
 *  - 
 MySQLParser_cursor_close_return
      pMySQLParser->cursor_close(pMySQLParser)
 *  - 
 MySQLParser_cursor_fetch_return
      pMySQLParser->cursor_fetch(pMySQLParser)
 *  - 
 MySQLParser_cursor_open_return
      pMySQLParser->cursor_open(pMySQLParser)
 *  - 
 MySQLParser_schedule_return
      pMySQLParser->schedule(pMySQLParser)
 *  - 
 MySQLParser_database_option_return
      pMySQLParser->database_option(pMySQLParser)
 *  - 
 MySQLParser_column_definition_return
      pMySQLParser->column_definition(pMySQLParser)
 *  - 
 MySQLParser_field_spec_return
      pMySQLParser->field_spec(pMySQLParser)
 *  - 
 MySQLParser_field_def_return
      pMySQLParser->field_def(pMySQLParser)
 *  - 
 MySQLParser_field_def_tail_return
      pMySQLParser->field_def_tail(pMySQLParser)
 *  - 
 MySQLParser_attribute_return
      pMySQLParser->attribute(pMySQLParser)
 *  - 
 MySQLParser_gcol_attribute_return
      pMySQLParser->gcol_attribute(pMySQLParser)
 *  - 
 MySQLParser_reference_definition_return
      pMySQLParser->reference_definition(pMySQLParser)
 *  - 
 MySQLParser_index_columns_return
      pMySQLParser->index_columns(pMySQLParser)
 *  - 
 MySQLParser_index_column_return
      pMySQLParser->index_column(pMySQLParser)
 *  - 
 MySQLParser_index_type_return
      pMySQLParser->index_type(pMySQLParser)
 *  - 
 MySQLParser_normal_index_option_return
      pMySQLParser->normal_index_option(pMySQLParser)
 *  - 
 MySQLParser_fulltext_index_option_return
      pMySQLParser->fulltext_index_option(pMySQLParser)
 *  - 
 MySQLParser_spatial_index_option_return
      pMySQLParser->spatial_index_option(pMySQLParser)
 *  - 
 MySQLParser_all_key_option_return
      pMySQLParser->all_key_option(pMySQLParser)
 *  - 
 MySQLParser_reference_option_return
      pMySQLParser->reference_option(pMySQLParser)
 *  - 
 MySQLParser_data_type_return
      pMySQLParser->data_type(pMySQLParser)
 *  - 
 MySQLParser_data_type_definition_return
      pMySQLParser->data_type_definition(pMySQLParser)
 *  - 
 MySQLParser_data_type_elements_return
      pMySQLParser->data_type_elements(pMySQLParser)
 *  - 
 MySQLParser_field_length_return
      pMySQLParser->field_length(pMySQLParser)
 *  - 
 MySQLParser_field_options_return
      pMySQLParser->field_options(pMySQLParser)
 *  - 
 MySQLParser_string_binary_return
      pMySQLParser->string_binary(pMySQLParser)
 *  - 
 MySQLParser_ascii_return
      pMySQLParser->ascii(pMySQLParser)
 *  - 
 MySQLParser_unicode_return
      pMySQLParser->unicode(pMySQLParser)
 *  - 
 MySQLParser_type_datetime_precision_return
      pMySQLParser->type_datetime_precision(pMySQLParser)
 *  - 
 MySQLParser_charset_name_return
      pMySQLParser->charset_name(pMySQLParser)
 *  - 
 MySQLParser_charset_name_or_default_return
      pMySQLParser->charset_name_or_default(pMySQLParser)
 *  - 
 MySQLParser_collation_name_return
      pMySQLParser->collation_name(pMySQLParser)
 *  - 
 MySQLParser_collation_name_or_default_return
      pMySQLParser->collation_name_or_default(pMySQLParser)
 *  - 
 MySQLParser_spatial_type_return
      pMySQLParser->spatial_type(pMySQLParser)
 *  - 
 MySQLParser_alter_table_options_return
      pMySQLParser->alter_table_options(pMySQLParser)
 *  - 
 MySQLParser_create_table_options_return
      pMySQLParser->create_table_options(pMySQLParser)
 *  - 
 MySQLParser_create_table_option_return
      pMySQLParser->create_table_option(pMySQLParser)
 *  - 
 MySQLParser_partitioning_return
      pMySQLParser->partitioning(pMySQLParser)
 *  - 
 MySQLParser_partition_key_algorithm_return
      pMySQLParser->partition_key_algorithm(pMySQLParser)
 *  - 
 MySQLParser_partition_definitions_return
      pMySQLParser->partition_definitions(pMySQLParser)
 *  - 
 MySQLParser_partition_definition_return
      pMySQLParser->partition_definition(pMySQLParser)
 *  - 
 MySQLParser_partition_option_return
      pMySQLParser->partition_option(pMySQLParser)
 *  - 
 MySQLParser_subpartition_definition_return
      pMySQLParser->subpartition_definition(pMySQLParser)
 *  - 
 MySQLParser_partition_value_list_return
      pMySQLParser->partition_value_list(pMySQLParser)
 *  - 
 MySQLParser_definer_clause_return
      pMySQLParser->definer_clause(pMySQLParser)
 *  - 
 MySQLParser_if_exists_return
      pMySQLParser->if_exists(pMySQLParser)
 *  - 
 MySQLParser_if_not_exists_return
      pMySQLParser->if_not_exists(pMySQLParser)
 *  - 
 MySQLParser_procedure_parameter_return
      pMySQLParser->procedure_parameter(pMySQLParser)
 *  - 
 MySQLParser_function_parameter_return
      pMySQLParser->function_parameter(pMySQLParser)
 *  - 
 MySQLParser_schema_identifier_pair_return
      pMySQLParser->schema_identifier_pair(pMySQLParser)
 *  - 
 MySQLParser_view_identifier_list_return
      pMySQLParser->view_identifier_list(pMySQLParser)
 *  - 
 MySQLParser_field_name_list_return
      pMySQLParser->field_name_list(pMySQLParser)
 *  - 
 MySQLParser_column_assignment_list_with_default_return
      pMySQLParser->column_assignment_list_with_default(pMySQLParser)
 *  - 
 MySQLParser_column_assignment_with_default_return
      pMySQLParser->column_assignment_with_default(pMySQLParser)
 *  - 
 MySQLParser_charset_clause_return
      pMySQLParser->charset_clause(pMySQLParser)
 *  - 
 MySQLParser_fields_clause_return
      pMySQLParser->fields_clause(pMySQLParser)
 *  - 
 MySQLParser_field_term_return
      pMySQLParser->field_term(pMySQLParser)
 *  - 
 MySQLParser_lines_clause_return
      pMySQLParser->lines_clause(pMySQLParser)
 *  - 
 MySQLParser_line_term_return
      pMySQLParser->line_term(pMySQLParser)
 *  - 
 MySQLParser_user_list_return
      pMySQLParser->user_list(pMySQLParser)
 *  - 
 MySQLParser_grant_list_return
      pMySQLParser->grant_list(pMySQLParser)
 *  - 
 MySQLParser_grant_user_return
      pMySQLParser->grant_user(pMySQLParser)
 *  - 
 MySQLParser_user_return
      pMySQLParser->user(pMySQLParser)
 *  - 
 MySQLParser_like_clause_return
      pMySQLParser->like_clause(pMySQLParser)
 *  - 
 MySQLParser_like_or_where_return
      pMySQLParser->like_or_where(pMySQLParser)
 *  - 
 MySQLParser_online_option_return
      pMySQLParser->online_option(pMySQLParser)
 *  - 
 MySQLParser_no_write_to_bin_log_return
      pMySQLParser->no_write_to_bin_log(pMySQLParser)
 *  - 
 MySQLParser_use_partition_return
      pMySQLParser->use_partition(pMySQLParser)
 *  - 
 MySQLParser_column_name_return
      pMySQLParser->column_name(pMySQLParser)
 *  - 
 MySQLParser_column_ref_return
      pMySQLParser->column_ref(pMySQLParser)
 *  - 
 MySQLParser_column_ref_variants_return
      pMySQLParser->column_ref_variants(pMySQLParser)
 *  - 
 MySQLParser_column_internal_ref_return
      pMySQLParser->column_internal_ref(pMySQLParser)
 *  - 
 MySQLParser_column_ref_with_wildcard_return
      pMySQLParser->column_ref_with_wildcard(pMySQLParser)
 *  - 
 MySQLParser_column_ref_with_wildcard2_return
      pMySQLParser->column_ref_with_wildcard2(pMySQLParser)
 *  - 
 MySQLParser_index_name_return
      pMySQLParser->index_name(pMySQLParser)
 *  - 
 MySQLParser_index_ref_return
      pMySQLParser->index_ref(pMySQLParser)
 *  - 
 MySQLParser_table_wild_return
      pMySQLParser->table_wild(pMySQLParser)
 *  - 
 MySQLParser_schema_name_return
      pMySQLParser->schema_name(pMySQLParser)
 *  - 
 MySQLParser_schema_ref_return
      pMySQLParser->schema_ref(pMySQLParser)
 *  - 
 MySQLParser_procedure_name_return
      pMySQLParser->procedure_name(pMySQLParser)
 *  - 
 MySQLParser_procedure_ref_return
      pMySQLParser->procedure_ref(pMySQLParser)
 *  - 
 MySQLParser_function_name_return
      pMySQLParser->function_name(pMySQLParser)
 *  - 
 MySQLParser_function_ref_return
      pMySQLParser->function_ref(pMySQLParser)
 *  - 
 MySQLParser_trigger_name_return
      pMySQLParser->trigger_name(pMySQLParser)
 *  - 
 MySQLParser_trigger_ref_return
      pMySQLParser->trigger_ref(pMySQLParser)
 *  - 
 MySQLParser_view_name_return
      pMySQLParser->view_name(pMySQLParser)
 *  - 
 MySQLParser_view_ref_return
      pMySQLParser->view_ref(pMySQLParser)
 *  - 
 MySQLParser_tablespace_name_return
      pMySQLParser->tablespace_name(pMySQLParser)
 *  - 
 MySQLParser_tablespace_ref_return
      pMySQLParser->tablespace_ref(pMySQLParser)
 *  - 
 MySQLParser_logfile_group_name_return
      pMySQLParser->logfile_group_name(pMySQLParser)
 *  - 
 MySQLParser_logfile_group_ref_return
      pMySQLParser->logfile_group_ref(pMySQLParser)
 *  - 
 MySQLParser_event_name_return
      pMySQLParser->event_name(pMySQLParser)
 *  - 
 MySQLParser_event_ref_return
      pMySQLParser->event_ref(pMySQLParser)
 *  - 
 MySQLParser_udf_name_return
      pMySQLParser->udf_name(pMySQLParser)
 *  - 
 MySQLParser_server_name_return
      pMySQLParser->server_name(pMySQLParser)
 *  - 
 MySQLParser_server_ref_return
      pMySQLParser->server_ref(pMySQLParser)
 *  - 
 MySQLParser_engine_ref_return
      pMySQLParser->engine_ref(pMySQLParser)
 *  - 
 MySQLParser_table_name_return
      pMySQLParser->table_name(pMySQLParser)
 *  - 
 MySQLParser_filter_table_ref_return
      pMySQLParser->filter_table_ref(pMySQLParser)
 *  - 
 MySQLParser_table_ref_with_wildcard_return
      pMySQLParser->table_ref_with_wildcard(pMySQLParser)
 *  - 
 MySQLParser_table_ref_return
      pMySQLParser->table_ref(pMySQLParser)
 *  - 
 MySQLParser_table_ref_no_db_return
      pMySQLParser->table_ref_no_db(pMySQLParser)
 *  - 
 MySQLParser_table_name_variants_return
      pMySQLParser->table_name_variants(pMySQLParser)
 *  - 
 MySQLParser_table_ref_list_return
      pMySQLParser->table_ref_list(pMySQLParser)
 *  - 
 MySQLParser_table_ref_list_with_wildcard_return
      pMySQLParser->table_ref_list_with_wildcard(pMySQLParser)
 *  - 
 MySQLParser_pure_identifier_return
      pMySQLParser->pure_identifier(pMySQLParser)
 *  - 
 MySQLParser_identifier_return
      pMySQLParser->identifier(pMySQLParser)
 *  - 
 MySQLParser_identifier_list_return
      pMySQLParser->identifier_list(pMySQLParser)
 *  - 
 MySQLParser_identifier_list_with_parentheses_return
      pMySQLParser->identifier_list_with_parentheses(pMySQLParser)
 *  - 
 MySQLParser_qualified_identifier_return
      pMySQLParser->qualified_identifier(pMySQLParser)
 *  - 
 MySQLParser_ulong_number_return
      pMySQLParser->ulong_number(pMySQLParser)
 *  - 
 MySQLParser_real_ulong_number_return
      pMySQLParser->real_ulong_number(pMySQLParser)
 *  - 
 MySQLParser_ulonglong_number_return
      pMySQLParser->ulonglong_number(pMySQLParser)
 *  - 
 MySQLParser_real_ulonglong_number_return
      pMySQLParser->real_ulonglong_number(pMySQLParser)
 *  - 
 MySQLParser_string_list_return
      pMySQLParser->string_list(pMySQLParser)
 *  - 
 MySQLParser_text_string_return
      pMySQLParser->text_string(pMySQLParser)
 *  - 
 MySQLParser_text_string_no_linebreak_return
      pMySQLParser->text_string_no_linebreak(pMySQLParser)
 *  - 
 MySQLParser_literal_return
      pMySQLParser->literal(pMySQLParser)
 *  - 
 MySQLParser_signed_literal_return
      pMySQLParser->signed_literal(pMySQLParser)
 *  - 
 MySQLParser_string_literal_return
      pMySQLParser->string_literal(pMySQLParser)
 *  - 
 MySQLParser_string_return
      pMySQLParser->string(pMySQLParser)
 *  - 
 MySQLParser_num_literal_return
      pMySQLParser->num_literal(pMySQLParser)
 *  - 
 MySQLParser_bool_literal_return
      pMySQLParser->bool_literal(pMySQLParser)
 *  - 
 MySQLParser_null_literal_return
      pMySQLParser->null_literal(pMySQLParser)
 *  - 
 MySQLParser_temporal_literal_return
      pMySQLParser->temporal_literal(pMySQLParser)
 *  - 
 MySQLParser_integer_type_return
      pMySQLParser->integer_type(pMySQLParser)
 *  - 
 MySQLParser_real_literal_return
      pMySQLParser->real_literal(pMySQLParser)
 *  - 
 MySQLParser_float_options_return
      pMySQLParser->float_options(pMySQLParser)
 *  - 
 MySQLParser_precision_return
      pMySQLParser->precision(pMySQLParser)
 *  - 
 MySQLParser_nchar_literal_return
      pMySQLParser->nchar_literal(pMySQLParser)
 *  - 
 MySQLParser_varchar_literal_return
      pMySQLParser->varchar_literal(pMySQLParser)
 *  - 
 MySQLParser_nvarchar_literal_return
      pMySQLParser->nvarchar_literal(pMySQLParser)
 *  - 
 MySQLParser_text_or_identifier_return
      pMySQLParser->text_or_identifier(pMySQLParser)
 *  - 
 MySQLParser_size_number_return
      pMySQLParser->size_number(pMySQLParser)
 *  - 
 MySQLParser_parentheses_return
      pMySQLParser->parentheses(pMySQLParser)
 *  - 
 MySQLParser_equal_return
      pMySQLParser->equal(pMySQLParser)
 *  - 
 MySQLParser_option_type_return
      pMySQLParser->option_type(pMySQLParser)
 *  - 
 MySQLParser_keyword_return
      pMySQLParser->keyword(pMySQLParser)
 *  - 
 MySQLParser_keyword_sp_return
      pMySQLParser->keyword_sp(pMySQLParser)
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_MySQLParser_H
#define _MySQLParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct MySQLParser_Ctx_struct MySQLParser, * pMySQLParser;




#define ANTLR3_HUGE
#ifndef _WIN32
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wparentheses"
#ifdef __clang___
// Comparison of unsigned expression >= 0 is always true.
#pragma GCC diagnostic ignored "-Wtautological-compare"
#else
#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ > 6 )
#pragma GCC diagnostic ignored "-Wtype-limits"
#endif
#endif
#endif

#include "MySQLLexer.h" // Not automatically included by the generator.


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */

typedef struct MySQLParser_query_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_query_return;



typedef struct MySQLParser_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_statement_return;



typedef struct MySQLParser_alter_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_alter_statement_return;



typedef struct MySQLParser_alter_database_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_alter_database_return;



typedef struct MySQLParser_alter_event_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_alter_event_return;



typedef struct MySQLParser_alter_log_file_group_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_alter_log_file_group_return;



typedef struct MySQLParser_alter_server_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_alter_server_return;



typedef struct MySQLParser_alter_table_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_alter_table_return;



typedef struct MySQLParser_alter_table_commands_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_alter_table_commands_return;



typedef struct MySQLParser_alter_table_list_item_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_alter_table_list_item_return;



typedef struct MySQLParser_alter_table_list_entry_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_alter_table_list_entry_return;



typedef struct MySQLParser_key_def_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_key_def_return;



typedef struct MySQLParser_alter_order_by_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_alter_order_by_return;



typedef struct MySQLParser_alter_algorithm_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_alter_algorithm_option_return;



typedef struct MySQLParser_alter_lock_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_alter_lock_option_return;



typedef struct MySQLParser_index_lock_algorithm_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_index_lock_algorithm_return;



typedef struct MySQLParser_alter_partition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_alter_partition_return;



typedef struct MySQLParser_validation_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_validation_return;



typedef struct MySQLParser_remove_partitioning_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_remove_partitioning_return;



typedef struct MySQLParser_all_or_partition_name_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_all_or_partition_name_list_return;



typedef struct MySQLParser_alter_tablespace_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_alter_tablespace_return;



typedef struct MySQLParser_alter_tablespace_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_alter_tablespace_option_return;



typedef struct MySQLParser_change_tablespace_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_change_tablespace_option_return;



typedef struct MySQLParser_alter_view_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_alter_view_return;



typedef struct MySQLParser_create_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_statement_return;



typedef struct MySQLParser_create_database_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_database_return;



typedef struct MySQLParser_create_database_tail_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_database_tail_return;



typedef struct MySQLParser_create_with_definer_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_with_definer_return;



typedef struct MySQLParser_create_event_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_event_return;



typedef struct MySQLParser_create_event_tail_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_event_tail_return;



typedef struct MySQLParser_create_routine_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_routine_return;



typedef struct MySQLParser_create_procedure_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_procedure_return;



typedef struct MySQLParser_create_function_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_function_return;



typedef struct MySQLParser_create_routine_or_udf_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_routine_or_udf_return;



typedef struct MySQLParser_procedure_body_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_procedure_body_return;



typedef struct MySQLParser_function_body_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_function_body_return;



typedef struct MySQLParser_udf_tail_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_udf_tail_return;



typedef struct MySQLParser_routine_create_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_routine_create_options_return;



typedef struct MySQLParser_routine_create_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_routine_create_option_return;



typedef struct MySQLParser_routine_alter_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_routine_alter_options_return;



typedef struct MySQLParser_routine_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_routine_option_return;



typedef struct MySQLParser_create_index_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_index_return;



typedef struct MySQLParser_create_index_tail_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_index_tail_return;



typedef struct MySQLParser_create_index_target_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_index_target_return;



typedef struct MySQLParser_create_logfile_group_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_logfile_group_return;



typedef struct MySQLParser_create_logfile_group_tail_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_logfile_group_tail_return;



typedef struct MySQLParser_logfile_group_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_logfile_group_options_return;



typedef struct MySQLParser_logfile_group_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_logfile_group_option_return;



typedef struct MySQLParser_create_server_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_server_return;



typedef struct MySQLParser_create_server_tail_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_server_tail_return;



typedef struct MySQLParser_server_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_server_options_return;



typedef struct MySQLParser_server_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_server_option_return;



typedef struct MySQLParser_create_table_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_table_return;



typedef struct MySQLParser_create_table_tail_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_table_tail_return;



typedef struct MySQLParser_create_field_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_field_list_return;



typedef struct MySQLParser_create_item_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_item_return;



typedef struct MySQLParser_create_field_list_item_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_field_list_item_return;



typedef struct MySQLParser_table_creation_source_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_table_creation_source_return;



typedef struct MySQLParser_create_select_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_select_return;



typedef struct MySQLParser_create_tablespace_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_tablespace_return;



typedef struct MySQLParser_create_tablespace_tail_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_tablespace_tail_return;



typedef struct MySQLParser_tablespace_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_tablespace_options_return;



typedef struct MySQLParser_tablespace_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_tablespace_option_return;



typedef struct MySQLParser_create_trigger_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_trigger_return;



typedef struct MySQLParser_create_trigger_tail_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_trigger_tail_return;



typedef struct MySQLParser_trigger_follows_precedes_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_trigger_follows_precedes_clause_return;



typedef struct MySQLParser_create_view_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_view_return;



typedef struct MySQLParser_create_view_tail_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_view_tail_return;



typedef struct MySQLParser_view_replace_or_algorithm_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_view_replace_or_algorithm_return;



typedef struct MySQLParser_view_algorithm_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_view_algorithm_return;



typedef struct MySQLParser_drop_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_drop_statement_return;



typedef struct MySQLParser_drop_logfile_group_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_drop_logfile_group_option_return;



typedef struct MySQLParser_rename_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_rename_table_statement_return;



typedef struct MySQLParser_truncate_table_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_truncate_table_statement_return;



typedef struct MySQLParser_call_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_call_statement_return;



typedef struct MySQLParser_delete_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_delete_statement_return;



typedef struct MySQLParser_partition_delete_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_partition_delete_return;



typedef struct MySQLParser_delete_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_delete_option_return;



typedef struct MySQLParser_do_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_do_statement_return;



typedef struct MySQLParser_handler_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_handler_statement_return;



typedef struct MySQLParser_handler_read_or_scan_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_handler_read_or_scan_return;



typedef struct MySQLParser_insert_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_insert_statement_return;



typedef struct MySQLParser_insert_lock_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_insert_lock_option_return;



typedef struct MySQLParser_insert_field_spec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_insert_field_spec_return;



typedef struct MySQLParser_fields_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_fields_return;



typedef struct MySQLParser_insert_identifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_insert_identifier_return;



typedef struct MySQLParser_insert_values_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_insert_values_return;



typedef struct MySQLParser_insert_query_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_insert_query_expression_return;



typedef struct MySQLParser_insert_value_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_insert_value_list_return;



typedef struct MySQLParser_values_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_values_return;



typedef struct MySQLParser_duplicate_key_update_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_duplicate_key_update_return;



typedef struct MySQLParser_load_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_load_statement_return;



typedef struct MySQLParser_data_or_xml_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_data_or_xml_return;



typedef struct MySQLParser_xml_rows_identified_by_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_xml_rows_identified_by_return;



typedef struct MySQLParser_load_data_file_tail_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_load_data_file_tail_return;



typedef struct MySQLParser_load_data_file_target_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_load_data_file_target_list_return;



typedef struct MySQLParser_field_or_variable_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_field_or_variable_list_return;



typedef struct MySQLParser_replace_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_replace_statement_return;



typedef struct MySQLParser_select_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_select_statement_return;



typedef struct MySQLParser_select_paren_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_select_paren_return;



typedef struct MySQLParser_select_from_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_select_from_return;



typedef struct MySQLParser_select_part2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_select_part2_return;



typedef struct MySQLParser_table_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_table_expression_return;



typedef struct MySQLParser_subquery_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_subquery_return;



typedef struct MySQLParser_query_expression_body_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_query_expression_body_return;



typedef struct MySQLParser_select_part2_derived_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_select_part2_derived_return;



typedef struct MySQLParser_select_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_select_option_return;



typedef struct MySQLParser_query_spec_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_query_spec_option_return;



typedef struct MySQLParser_select_item_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_select_item_list_return;



typedef struct MySQLParser_select_item_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_select_item_return;



typedef struct MySQLParser_select_alias_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_select_alias_return;



typedef struct MySQLParser_limit_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_limit_clause_return;



typedef struct MySQLParser_simple_limit_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_simple_limit_clause_return;



typedef struct MySQLParser_limit_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_limit_options_return;



typedef struct MySQLParser_limit_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_limit_option_return;



typedef struct MySQLParser_into_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_into_clause_return;



typedef struct MySQLParser_procedure_analyse_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_procedure_analyse_clause_return;



typedef struct MySQLParser_having_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_having_clause_return;



typedef struct MySQLParser_group_by_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_group_by_clause_return;



typedef struct MySQLParser_olap_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_olap_option_return;



typedef struct MySQLParser_order_by_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_order_by_clause_return;



typedef struct MySQLParser_order_by_or_limit_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_order_by_or_limit_return;



typedef struct MySQLParser_direction_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_direction_return;



typedef struct MySQLParser_from_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_from_clause_return;



typedef struct MySQLParser_where_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_where_clause_return;



typedef struct MySQLParser_table_reference_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_table_reference_list_return;



typedef struct MySQLParser_join_table_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_join_table_list_return;



typedef struct MySQLParser_escaped_table_reference_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_escaped_table_reference_return;



typedef struct MySQLParser_table_reference_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_table_reference_return;



typedef struct MySQLParser_join_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_join_return;



typedef struct MySQLParser_table_factor_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_table_factor_return;



typedef struct MySQLParser_select_table_factor_union_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_select_table_factor_union_return;



typedef struct MySQLParser_query_specification_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_query_specification_return;



typedef struct MySQLParser_join_table_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_join_table_return;



typedef struct MySQLParser_join_condition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_join_condition_return;



typedef struct MySQLParser_union_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_union_clause_return;



typedef struct MySQLParser_union_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_union_option_return;



typedef struct MySQLParser_union_or_order_by_or_limit_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_union_or_order_by_or_limit_return;



typedef struct MySQLParser_select_lock_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_select_lock_type_return;



typedef struct MySQLParser_table_alias_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_table_alias_return;



typedef struct MySQLParser_index_hint_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_index_hint_list_return;



typedef struct MySQLParser_index_hint_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_index_hint_return;



typedef struct MySQLParser_index_hint_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_index_hint_type_return;



typedef struct MySQLParser_key_or_index_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_key_or_index_return;



typedef struct MySQLParser_index_hint_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_index_hint_clause_return;



typedef struct MySQLParser_index_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_index_list_return;



typedef struct MySQLParser_index_list_element_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_index_list_element_return;



typedef struct MySQLParser_update_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_update_statement_return;



typedef struct MySQLParser_transaction_or_locking_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_transaction_or_locking_statement_return;



typedef struct MySQLParser_transaction_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_transaction_statement_return;



typedef struct MySQLParser_transaction_characteristic_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_transaction_characteristic_return;



typedef struct MySQLParser_set_transaction_characteristic_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_set_transaction_characteristic_return;



typedef struct MySQLParser_isolation_level_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_isolation_level_return;



typedef struct MySQLParser_savepoint_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_savepoint_statement_return;



typedef struct MySQLParser_lock_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_lock_statement_return;



typedef struct MySQLParser_lock_item_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_lock_item_return;



typedef struct MySQLParser_lock_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_lock_option_return;



typedef struct MySQLParser_xa_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_xa_statement_return;



typedef struct MySQLParser_xa_convert_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_xa_convert_return;



typedef struct MySQLParser_xid_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_xid_return;



typedef struct MySQLParser_replication_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_replication_statement_return;



typedef struct MySQLParser_replication_load_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_replication_load_return;



typedef struct MySQLParser_change_master_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_change_master_return;



typedef struct MySQLParser_change_master_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_change_master_options_return;



typedef struct MySQLParser_master_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_master_option_return;



typedef struct MySQLParser_master_file_def_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_master_file_def_return;



typedef struct MySQLParser_server_id_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_server_id_list_return;



typedef struct MySQLParser_change_replication_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_change_replication_return;



typedef struct MySQLParser_filter_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_filter_definition_return;



typedef struct MySQLParser_filter_db_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_filter_db_list_return;



typedef struct MySQLParser_filter_table_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_filter_table_list_return;



typedef struct MySQLParser_filter_string_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_filter_string_list_return;



typedef struct MySQLParser_filter_wild_db_table_string_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_filter_wild_db_table_string_return;



typedef struct MySQLParser_filter_db_pair_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_filter_db_pair_list_return;



typedef struct MySQLParser_slave_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_slave_return;



typedef struct MySQLParser_slave_until_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_slave_until_options_return;



typedef struct MySQLParser_slave_connection_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_slave_connection_options_return;



typedef struct MySQLParser_slave_thread_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_slave_thread_options_return;



typedef struct MySQLParser_slave_thread_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_slave_thread_option_return;



typedef struct MySQLParser_group_replication_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_group_replication_return;



typedef struct MySQLParser_prepared_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_prepared_statement_return;



typedef struct MySQLParser_execute_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_execute_statement_return;



typedef struct MySQLParser_execute_var_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_execute_var_list_return;



typedef struct MySQLParser_account_management_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_account_management_statement_return;



typedef struct MySQLParser_alter_user_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_alter_user_return;



typedef struct MySQLParser_alter_user_tail_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_alter_user_tail_return;



typedef struct MySQLParser_create_user_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_user_return;



typedef struct MySQLParser_create_user_tail_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_user_tail_return;



typedef struct MySQLParser_require_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_require_clause_return;



typedef struct MySQLParser_connect_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_connect_options_return;



typedef struct MySQLParser_account_lock_password_expire_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_account_lock_password_expire_options_return;



typedef struct MySQLParser_drop_user_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_drop_user_return;



typedef struct MySQLParser_parse_grant_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_parse_grant_return;



typedef struct MySQLParser_grant_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_grant_return;



typedef struct MySQLParser_grant_proxy_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_grant_proxy_return;



typedef struct MySQLParser_rename_user_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_rename_user_return;



typedef struct MySQLParser_revoke_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_revoke_statement_return;



typedef struct MySQLParser_privilege_target_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_privilege_target_return;



typedef struct MySQLParser_set_password_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_set_password_return;



typedef struct MySQLParser_grant_object_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_grant_object_type_return;



typedef struct MySQLParser_grant_privileges_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_grant_privileges_return;



typedef struct MySQLParser_privilege_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_privilege_type_return;



typedef struct MySQLParser_privilege_level_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_privilege_level_return;



typedef struct MySQLParser_require_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_require_list_return;



typedef struct MySQLParser_require_list_element_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_require_list_element_return;



typedef struct MySQLParser_grant_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_grant_option_return;



typedef struct MySQLParser_table_administration_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_table_administration_statement_return;



typedef struct MySQLParser_check_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_check_option_return;



typedef struct MySQLParser_repair_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_repair_option_return;



typedef struct MySQLParser_install_uninstall_statment_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_install_uninstall_statment_return;



typedef struct MySQLParser_set_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_set_statement_return;



typedef struct MySQLParser_option_value_no_option_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_option_value_no_option_type_return;



typedef struct MySQLParser_option_value_following_option_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_option_value_following_option_type_return;



typedef struct MySQLParser_set_expression_or_default_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_set_expression_or_default_return;



typedef struct MySQLParser_option_value_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_option_value_list_return;



typedef struct MySQLParser_option_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_option_value_return;



typedef struct MySQLParser_show_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_show_statement_return;



typedef struct MySQLParser_non_blocking_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_non_blocking_return;



typedef struct MySQLParser_from_or_in_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_from_or_in_return;



typedef struct MySQLParser_in_db_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_in_db_return;



typedef struct MySQLParser_profile_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_profile_type_return;



typedef struct MySQLParser_other_administrative_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_other_administrative_statement_return;



typedef struct MySQLParser_key_cache_list_or_parts_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_key_cache_list_or_parts_return;



typedef struct MySQLParser_key_cache_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_key_cache_list_return;



typedef struct MySQLParser_assign_to_keycache_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_assign_to_keycache_return;



typedef struct MySQLParser_assign_to_keycache_partition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_assign_to_keycache_partition_return;



typedef struct MySQLParser_cache_keys_spec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_cache_keys_spec_return;



typedef struct MySQLParser_key_usage_element_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_key_usage_element_return;



typedef struct MySQLParser_flush_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_flush_option_return;



typedef struct MySQLParser_log_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_log_type_return;



typedef struct MySQLParser_flush_tables_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_flush_tables_return;



typedef struct MySQLParser_flush_tables_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_flush_tables_options_return;



typedef struct MySQLParser_load_table_index_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_load_table_index_list_return;



typedef struct MySQLParser_load_table_index_partion_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_load_table_index_partion_return;



typedef struct MySQLParser_reset_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_reset_option_return;



typedef struct MySQLParser_utility_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_utility_statement_return;



typedef struct MySQLParser_describe_command_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_describe_command_return;



typedef struct MySQLParser_explainable_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_explainable_statement_return;



typedef struct MySQLParser_use_command_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_use_command_return;



typedef struct MySQLParser_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_expression_return;



typedef struct MySQLParser_logical_or_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_logical_or_expression_return;



typedef struct MySQLParser_logical_xor_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_logical_xor_expression_return;



typedef struct MySQLParser_logical_and_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_logical_and_expression_return;



typedef struct MySQLParser_logical_not_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_logical_not_expression_return;



typedef struct MySQLParser_boolean_primary_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_boolean_primary_expression_return;



typedef struct MySQLParser_predicate_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_predicate_return;



typedef struct MySQLParser_predicate_in_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_predicate_in_return;



typedef struct MySQLParser_bitwise_or_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_bitwise_or_expression_return;



typedef struct MySQLParser_bitwise_and_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_bitwise_and_expression_return;



typedef struct MySQLParser_shift_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_shift_expression_return;



typedef struct MySQLParser_additive_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_additive_expression_return;



typedef struct MySQLParser_multiplicative_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_multiplicative_expression_return;



typedef struct MySQLParser_bitwise_xor_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_bitwise_xor_expression_return;



typedef struct MySQLParser_concat_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_concat_expression_return;



typedef struct MySQLParser_unary_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_unary_expression_return;



typedef struct MySQLParser_not_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_not_expression_return;



typedef struct MySQLParser_interval_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_interval_expression_return;



typedef struct MySQLParser_interval_function_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_interval_function_return;



typedef struct MySQLParser_interval_time_span_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_interval_time_span_return;



typedef struct MySQLParser_primary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_primary_return;



typedef struct MySQLParser_expression_with_nested_parentheses_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_expression_with_nested_parentheses_return;



typedef struct MySQLParser_comparison_operator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_comparison_operator_return;



typedef struct MySQLParser_multiplication_operator_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_multiplication_operator_return;



typedef struct MySQLParser_runtime_function_call_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_runtime_function_call_return;



typedef struct MySQLParser_runtime_function_call_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_runtime_function_call_expression_return;



typedef struct MySQLParser_time_function_parameters_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_time_function_parameters_return;



typedef struct MySQLParser_fractional_precision_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_fractional_precision_return;



typedef struct MySQLParser_weight_string_levels_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_weight_string_levels_return;



typedef struct MySQLParser_weight_string_level_list_item_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_weight_string_level_list_item_return;



typedef struct MySQLParser_date_time_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_date_time_type_return;



typedef struct MySQLParser_trim_function_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_trim_function_return;



typedef struct MySQLParser_substring_function_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_substring_function_return;



typedef struct MySQLParser_geometry_function_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_geometry_function_return;



typedef struct MySQLParser_aggregate_function_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_aggregate_function_return;



typedef struct MySQLParser_in_aggregate_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_in_aggregate_expression_return;



typedef struct MySQLParser_count_function_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_count_function_return;



typedef struct MySQLParser_udf_call_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_udf_call_return;



typedef struct MySQLParser_udf_call_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_udf_call_expression_return;



typedef struct MySQLParser_stored_function_call_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_stored_function_call_return;



typedef struct MySQLParser_stored_function_call_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_stored_function_call_expression_return;



typedef struct MySQLParser_aliased_expression_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_aliased_expression_list_return;



typedef struct MySQLParser_aliased_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_aliased_expression_return;



typedef struct MySQLParser_variable_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_variable_return;



typedef struct MySQLParser_user_variable_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_user_variable_return;



typedef struct MySQLParser_system_variable_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_system_variable_return;



typedef struct MySQLParser_variable_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_variable_name_return;



typedef struct MySQLParser_match_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_match_expression_return;



typedef struct MySQLParser_case_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_case_expression_return;



typedef struct MySQLParser_when_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_when_expression_return;



typedef struct MySQLParser_then_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_then_expression_return;



typedef struct MySQLParser_else_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_else_expression_return;



typedef struct MySQLParser_cast_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_cast_expression_return;



typedef struct MySQLParser_cast_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_cast_type_return;



typedef struct MySQLParser_encoding_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_encoding_return;



typedef struct MySQLParser_charset_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_charset_return;



typedef struct MySQLParser_not_rule_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_not_rule_return;



typedef struct MySQLParser_not2_rule_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_not2_rule_return;



typedef struct MySQLParser_or_rule_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_or_rule_return;



typedef struct MySQLParser_xor_rule_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_xor_rule_return;



typedef struct MySQLParser_and_rule_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_and_rule_return;



typedef struct MySQLParser_interval_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_interval_return;



typedef struct MySQLParser_interval_unit_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_interval_unit_return;



typedef struct MySQLParser_interval_timestamp_unit_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_interval_timestamp_unit_return;



typedef struct MySQLParser_expression_list_with_parentheses_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_expression_list_with_parentheses_return;



typedef struct MySQLParser_optional_expression_list_with_parentheses_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_optional_expression_list_with_parentheses_return;



typedef struct MySQLParser_expression_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_expression_list_return;



typedef struct MySQLParser_expression_list_with_direction_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_expression_list_with_direction_return;



typedef struct MySQLParser_channel_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_channel_return;



typedef struct MySQLParser_compound_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_compound_statement_return;



typedef struct MySQLParser_compound_statement_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_compound_statement_list_return;



typedef struct MySQLParser_label_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_label_return;



typedef struct MySQLParser_label_identifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_label_identifier_return;



typedef struct MySQLParser_begin_end_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_begin_end_block_return;



typedef struct MySQLParser_loop_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_loop_block_return;



typedef struct MySQLParser_repeat_until_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_repeat_until_block_return;



typedef struct MySQLParser_while_do_block_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_while_do_block_return;



typedef struct MySQLParser_declarations_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_declarations_return;



typedef struct MySQLParser_variable_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_variable_declaration_return;



typedef struct MySQLParser_condition_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_condition_declaration_return;



typedef struct MySQLParser_sp_condition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_sp_condition_return;



typedef struct MySQLParser_sqlstate_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_sqlstate_return;



typedef struct MySQLParser_cursor_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_cursor_declaration_return;



typedef struct MySQLParser_handler_declaration_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_handler_declaration_return;



typedef struct MySQLParser_handler_condition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_handler_condition_return;



typedef struct MySQLParser_case_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_case_statement_return;



typedef struct MySQLParser_then_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_then_statement_return;



typedef struct MySQLParser_else_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_else_statement_return;



typedef struct MySQLParser_if_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_if_statement_return;



typedef struct MySQLParser_if_body_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_if_body_return;



typedef struct MySQLParser_iterate_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_iterate_statement_return;



typedef struct MySQLParser_leave_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_leave_statement_return;



typedef struct MySQLParser_return_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_return_statement_return;



typedef struct MySQLParser_get_diagnostics_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_get_diagnostics_return;



typedef struct MySQLParser_signal_allowed_expression_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_signal_allowed_expression_return;



typedef struct MySQLParser_statement_information_item_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_statement_information_item_return;



typedef struct MySQLParser_condition_information_item_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_condition_information_item_return;



typedef struct MySQLParser_signal_information_item_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_signal_information_item_name_return;



typedef struct MySQLParser_signal_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_signal_statement_return;



typedef struct MySQLParser_resignal_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_resignal_statement_return;



typedef struct MySQLParser_signal_information_item_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_signal_information_item_return;



typedef struct MySQLParser_cursor_close_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_cursor_close_return;



typedef struct MySQLParser_cursor_fetch_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_cursor_fetch_return;



typedef struct MySQLParser_cursor_open_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_cursor_open_return;



typedef struct MySQLParser_schedule_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_schedule_return;



typedef struct MySQLParser_database_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_database_option_return;



typedef struct MySQLParser_column_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_column_definition_return;



typedef struct MySQLParser_field_spec_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_field_spec_return;



typedef struct MySQLParser_field_def_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_field_def_return;



typedef struct MySQLParser_field_def_tail_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_field_def_tail_return;



typedef struct MySQLParser_attribute_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_attribute_return;



typedef struct MySQLParser_gcol_attribute_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_gcol_attribute_return;



typedef struct MySQLParser_reference_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_reference_definition_return;



typedef struct MySQLParser_index_columns_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_index_columns_return;



typedef struct MySQLParser_index_column_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_index_column_return;



typedef struct MySQLParser_index_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_index_type_return;



typedef struct MySQLParser_normal_index_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_normal_index_option_return;



typedef struct MySQLParser_fulltext_index_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_fulltext_index_option_return;



typedef struct MySQLParser_spatial_index_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_spatial_index_option_return;



typedef struct MySQLParser_all_key_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_all_key_option_return;



typedef struct MySQLParser_reference_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_reference_option_return;



typedef struct MySQLParser_data_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_data_type_return;



typedef struct MySQLParser_data_type_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_data_type_definition_return;



typedef struct MySQLParser_data_type_elements_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_data_type_elements_return;



typedef struct MySQLParser_field_length_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_field_length_return;



typedef struct MySQLParser_field_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_field_options_return;



typedef struct MySQLParser_string_binary_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_string_binary_return;



typedef struct MySQLParser_ascii_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_ascii_return;



typedef struct MySQLParser_unicode_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_unicode_return;



typedef struct MySQLParser_type_datetime_precision_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_type_datetime_precision_return;



typedef struct MySQLParser_charset_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_charset_name_return;



typedef struct MySQLParser_charset_name_or_default_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_charset_name_or_default_return;



typedef struct MySQLParser_collation_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_collation_name_return;



typedef struct MySQLParser_collation_name_or_default_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_collation_name_or_default_return;



typedef struct MySQLParser_spatial_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_spatial_type_return;



typedef struct MySQLParser_alter_table_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_alter_table_options_return;



typedef struct MySQLParser_create_table_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_table_options_return;



typedef struct MySQLParser_create_table_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_create_table_option_return;



typedef struct MySQLParser_partitioning_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_partitioning_return;



typedef struct MySQLParser_partition_key_algorithm_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_partition_key_algorithm_return;



typedef struct MySQLParser_partition_definitions_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_partition_definitions_return;



typedef struct MySQLParser_partition_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_partition_definition_return;



typedef struct MySQLParser_partition_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_partition_option_return;



typedef struct MySQLParser_subpartition_definition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_subpartition_definition_return;



typedef struct MySQLParser_partition_value_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_partition_value_list_return;



typedef struct MySQLParser_definer_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_definer_clause_return;



typedef struct MySQLParser_if_exists_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_if_exists_return;



typedef struct MySQLParser_if_not_exists_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_if_not_exists_return;



typedef struct MySQLParser_procedure_parameter_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_procedure_parameter_return;



typedef struct MySQLParser_function_parameter_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_function_parameter_return;



typedef struct MySQLParser_schema_identifier_pair_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_schema_identifier_pair_return;



typedef struct MySQLParser_view_identifier_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_view_identifier_list_return;



typedef struct MySQLParser_field_name_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_field_name_list_return;



typedef struct MySQLParser_column_assignment_list_with_default_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_column_assignment_list_with_default_return;



typedef struct MySQLParser_column_assignment_with_default_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_column_assignment_with_default_return;



typedef struct MySQLParser_charset_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_charset_clause_return;



typedef struct MySQLParser_fields_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_fields_clause_return;



typedef struct MySQLParser_field_term_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_field_term_return;



typedef struct MySQLParser_lines_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_lines_clause_return;



typedef struct MySQLParser_line_term_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_line_term_return;



typedef struct MySQLParser_user_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_user_list_return;



typedef struct MySQLParser_grant_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_grant_list_return;



typedef struct MySQLParser_grant_user_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_grant_user_return;



typedef struct MySQLParser_user_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_user_return;



typedef struct MySQLParser_like_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_like_clause_return;



typedef struct MySQLParser_like_or_where_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_like_or_where_return;



typedef struct MySQLParser_online_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_online_option_return;



typedef struct MySQLParser_no_write_to_bin_log_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_no_write_to_bin_log_return;



typedef struct MySQLParser_use_partition_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_use_partition_return;



typedef struct MySQLParser_column_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_column_name_return;



typedef struct MySQLParser_column_ref_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_column_ref_return;



typedef struct MySQLParser_column_ref_variants_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_column_ref_variants_return;



typedef struct MySQLParser_column_internal_ref_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_column_internal_ref_return;



typedef struct MySQLParser_column_ref_with_wildcard_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_column_ref_with_wildcard_return;



typedef struct MySQLParser_column_ref_with_wildcard2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_column_ref_with_wildcard2_return;



typedef struct MySQLParser_index_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_index_name_return;



typedef struct MySQLParser_index_ref_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_index_ref_return;



typedef struct MySQLParser_table_wild_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_table_wild_return;



typedef struct MySQLParser_schema_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_schema_name_return;



typedef struct MySQLParser_schema_ref_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_schema_ref_return;



typedef struct MySQLParser_procedure_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_procedure_name_return;



typedef struct MySQLParser_procedure_ref_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_procedure_ref_return;



typedef struct MySQLParser_function_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_function_name_return;



typedef struct MySQLParser_function_ref_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_function_ref_return;



typedef struct MySQLParser_trigger_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_trigger_name_return;



typedef struct MySQLParser_trigger_ref_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_trigger_ref_return;



typedef struct MySQLParser_view_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_view_name_return;



typedef struct MySQLParser_view_ref_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_view_ref_return;



typedef struct MySQLParser_tablespace_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_tablespace_name_return;



typedef struct MySQLParser_tablespace_ref_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_tablespace_ref_return;



typedef struct MySQLParser_logfile_group_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_logfile_group_name_return;



typedef struct MySQLParser_logfile_group_ref_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_logfile_group_ref_return;



typedef struct MySQLParser_event_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_event_name_return;



typedef struct MySQLParser_event_ref_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_event_ref_return;



typedef struct MySQLParser_udf_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_udf_name_return;



typedef struct MySQLParser_server_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_server_name_return;



typedef struct MySQLParser_server_ref_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_server_ref_return;



typedef struct MySQLParser_engine_ref_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_engine_ref_return;



typedef struct MySQLParser_table_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_table_name_return;



typedef struct MySQLParser_filter_table_ref_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_filter_table_ref_return;



typedef struct MySQLParser_table_ref_with_wildcard_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_table_ref_with_wildcard_return;



typedef struct MySQLParser_table_ref_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_table_ref_return;



typedef struct MySQLParser_table_ref_no_db_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_table_ref_no_db_return;



typedef struct MySQLParser_table_name_variants_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_table_name_variants_return;



typedef struct MySQLParser_table_ref_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_table_ref_list_return;



typedef struct MySQLParser_table_ref_list_with_wildcard_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_table_ref_list_with_wildcard_return;



typedef struct MySQLParser_pure_identifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_pure_identifier_return;



typedef struct MySQLParser_identifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_identifier_return;



typedef struct MySQLParser_identifier_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_identifier_list_return;



typedef struct MySQLParser_identifier_list_with_parentheses_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_identifier_list_with_parentheses_return;



typedef struct MySQLParser_qualified_identifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_qualified_identifier_return;



typedef struct MySQLParser_ulong_number_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_ulong_number_return;



typedef struct MySQLParser_real_ulong_number_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_real_ulong_number_return;



typedef struct MySQLParser_ulonglong_number_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_ulonglong_number_return;



typedef struct MySQLParser_real_ulonglong_number_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_real_ulonglong_number_return;



typedef struct MySQLParser_string_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_string_list_return;



typedef struct MySQLParser_text_string_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_text_string_return;



typedef struct MySQLParser_text_string_no_linebreak_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_text_string_no_linebreak_return;



typedef struct MySQLParser_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_literal_return;



typedef struct MySQLParser_signed_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_signed_literal_return;



typedef struct MySQLParser_string_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_string_literal_return;



typedef struct MySQLParser_string_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_string_return;



typedef struct MySQLParser_num_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_num_literal_return;



typedef struct MySQLParser_bool_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_bool_literal_return;



typedef struct MySQLParser_null_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_null_literal_return;



typedef struct MySQLParser_temporal_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_temporal_literal_return;



typedef struct MySQLParser_integer_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_integer_type_return;



typedef struct MySQLParser_real_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_real_literal_return;



typedef struct MySQLParser_float_options_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_float_options_return;



typedef struct MySQLParser_precision_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_precision_return;



typedef struct MySQLParser_nchar_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_nchar_literal_return;



typedef struct MySQLParser_varchar_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_varchar_literal_return;



typedef struct MySQLParser_nvarchar_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_nvarchar_literal_return;



typedef struct MySQLParser_text_or_identifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_text_or_identifier_return;



typedef struct MySQLParser_size_number_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_size_number_return;



typedef struct MySQLParser_parentheses_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_parentheses_return;



typedef struct MySQLParser_equal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_equal_return;



typedef struct MySQLParser_option_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_option_type_return;



typedef struct MySQLParser_keyword_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_keyword_return;



typedef struct MySQLParser_keyword_sp_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MySQLParser_keyword_sp_return;




/** Context tracking structure for 
MySQLParser

 */
struct MySQLParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     MySQLParser_query_return
     (*query)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_statement_return
     (*statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_alter_statement_return
     (*alter_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_alter_database_return
     (*alter_database)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_alter_event_return
     (*alter_event)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_alter_log_file_group_return
     (*alter_log_file_group)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_alter_server_return
     (*alter_server)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_alter_table_return
     (*alter_table)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_alter_table_commands_return
     (*alter_table_commands)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_alter_table_list_item_return
     (*alter_table_list_item)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_alter_table_list_entry_return
     (*alter_table_list_entry)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_key_def_return
     (*key_def)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_alter_order_by_return
     (*alter_order_by)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_alter_algorithm_option_return
     (*alter_algorithm_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_alter_lock_option_return
     (*alter_lock_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_index_lock_algorithm_return
     (*index_lock_algorithm)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_alter_partition_return
     (*alter_partition)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_validation_return
     (*validation)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_remove_partitioning_return
     (*remove_partitioning)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_all_or_partition_name_list_return
     (*all_or_partition_name_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_alter_tablespace_return
     (*alter_tablespace)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_alter_tablespace_option_return
     (*alter_tablespace_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_change_tablespace_option_return
     (*change_tablespace_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_alter_view_return
     (*alter_view)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_statement_return
     (*create_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_database_return
     (*create_database)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_database_tail_return
     (*create_database_tail)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_with_definer_return
     (*create_with_definer)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_event_return
     (*create_event)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_event_tail_return
     (*create_event_tail)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_routine_return
     (*create_routine)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_procedure_return
     (*create_procedure)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_function_return
     (*create_function)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_routine_or_udf_return
     (*create_routine_or_udf)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_procedure_body_return
     (*procedure_body)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_function_body_return
     (*function_body)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_udf_tail_return
     (*udf_tail)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_routine_create_options_return
     (*routine_create_options)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_routine_create_option_return
     (*routine_create_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_routine_alter_options_return
     (*routine_alter_options)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_routine_option_return
     (*routine_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_index_return
     (*create_index)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_index_tail_return
     (*create_index_tail)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_index_target_return
     (*create_index_target)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_logfile_group_return
     (*create_logfile_group)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_logfile_group_tail_return
     (*create_logfile_group_tail)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_logfile_group_options_return
     (*logfile_group_options)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_logfile_group_option_return
     (*logfile_group_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_server_return
     (*create_server)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_server_tail_return
     (*create_server_tail)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_server_options_return
     (*server_options)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_server_option_return
     (*server_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_table_return
     (*create_table)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_table_tail_return
     (*create_table_tail)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_field_list_return
     (*create_field_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_item_return
     (*create_item)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_field_list_item_return
     (*create_field_list_item)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_table_creation_source_return
     (*table_creation_source)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_select_return
     (*create_select)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_tablespace_return
     (*create_tablespace)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_tablespace_tail_return
     (*create_tablespace_tail)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_tablespace_options_return
     (*tablespace_options)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_tablespace_option_return
     (*tablespace_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_trigger_return
     (*create_trigger)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_trigger_tail_return
     (*create_trigger_tail)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_trigger_follows_precedes_clause_return
     (*trigger_follows_precedes_clause)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_view_return
     (*create_view)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_view_tail_return
     (*create_view_tail)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_view_replace_or_algorithm_return
     (*view_replace_or_algorithm)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_view_algorithm_return
     (*view_algorithm)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_drop_statement_return
     (*drop_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_drop_logfile_group_option_return
     (*drop_logfile_group_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_rename_table_statement_return
     (*rename_table_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_truncate_table_statement_return
     (*truncate_table_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_call_statement_return
     (*call_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_delete_statement_return
     (*delete_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_partition_delete_return
     (*partition_delete)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_delete_option_return
     (*delete_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_do_statement_return
     (*do_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_handler_statement_return
     (*handler_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_handler_read_or_scan_return
     (*handler_read_or_scan)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_insert_statement_return
     (*insert_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_insert_lock_option_return
     (*insert_lock_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_insert_field_spec_return
     (*insert_field_spec)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_fields_return
     (*fields)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_insert_identifier_return
     (*insert_identifier)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_insert_values_return
     (*insert_values)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_insert_query_expression_return
     (*insert_query_expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_insert_value_list_return
     (*insert_value_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_values_return
     (*values)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_duplicate_key_update_return
     (*duplicate_key_update)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_load_statement_return
     (*load_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_data_or_xml_return
     (*data_or_xml)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_xml_rows_identified_by_return
     (*xml_rows_identified_by)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_load_data_file_tail_return
     (*load_data_file_tail)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_load_data_file_target_list_return
     (*load_data_file_target_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_field_or_variable_list_return
     (*field_or_variable_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_replace_statement_return
     (*replace_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_select_statement_return
     (*select_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_select_paren_return
     (*select_paren)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_select_from_return
     (*select_from)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_select_part2_return
     (*select_part2)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_table_expression_return
     (*table_expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_subquery_return
     (*subquery)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_query_expression_body_return
     (*query_expression_body)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_select_part2_derived_return
     (*select_part2_derived)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_select_option_return
     (*select_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_query_spec_option_return
     (*query_spec_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_select_item_list_return
     (*select_item_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_select_item_return
     (*select_item)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_select_alias_return
     (*select_alias)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_limit_clause_return
     (*limit_clause)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_simple_limit_clause_return
     (*simple_limit_clause)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_limit_options_return
     (*limit_options)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_limit_option_return
     (*limit_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_into_clause_return
     (*into_clause)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_procedure_analyse_clause_return
     (*procedure_analyse_clause)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_having_clause_return
     (*having_clause)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_group_by_clause_return
     (*group_by_clause)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_olap_option_return
     (*olap_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_order_by_clause_return
     (*order_by_clause)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_order_by_or_limit_return
     (*order_by_or_limit)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_direction_return
     (*direction)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_from_clause_return
     (*from_clause)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_where_clause_return
     (*where_clause)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_table_reference_list_return
     (*table_reference_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_join_table_list_return
     (*join_table_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_escaped_table_reference_return
     (*escaped_table_reference)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_table_reference_return
     (*table_reference)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_join_return
     (*join)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_table_factor_return
     (*table_factor)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_select_table_factor_union_return
     (*select_table_factor_union)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_query_specification_return
     (*query_specification)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_join_table_return
     (*join_table)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_join_condition_return
     (*join_condition)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_union_clause_return
     (*union_clause)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_union_option_return
     (*union_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_union_or_order_by_or_limit_return
     (*union_or_order_by_or_limit)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_select_lock_type_return
     (*select_lock_type)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_table_alias_return
     (*table_alias)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_index_hint_list_return
     (*index_hint_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_index_hint_return
     (*index_hint)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_index_hint_type_return
     (*index_hint_type)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_key_or_index_return
     (*key_or_index)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_index_hint_clause_return
     (*index_hint_clause)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_index_list_return
     (*index_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_index_list_element_return
     (*index_list_element)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_update_statement_return
     (*update_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_transaction_or_locking_statement_return
     (*transaction_or_locking_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_transaction_statement_return
     (*transaction_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_transaction_characteristic_return
     (*transaction_characteristic)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_set_transaction_characteristic_return
     (*set_transaction_characteristic)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_isolation_level_return
     (*isolation_level)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_savepoint_statement_return
     (*savepoint_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_lock_statement_return
     (*lock_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_lock_item_return
     (*lock_item)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_lock_option_return
     (*lock_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_xa_statement_return
     (*xa_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_xa_convert_return
     (*xa_convert)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_xid_return
     (*xid)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_replication_statement_return
     (*replication_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_replication_load_return
     (*replication_load)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_change_master_return
     (*change_master)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_change_master_options_return
     (*change_master_options)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_master_option_return
     (*master_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_master_file_def_return
     (*master_file_def)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_server_id_list_return
     (*server_id_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_change_replication_return
     (*change_replication)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_filter_definition_return
     (*filter_definition)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_filter_db_list_return
     (*filter_db_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_filter_table_list_return
     (*filter_table_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_filter_string_list_return
     (*filter_string_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_filter_wild_db_table_string_return
     (*filter_wild_db_table_string)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_filter_db_pair_list_return
     (*filter_db_pair_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_slave_return
     (*slave)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_slave_until_options_return
     (*slave_until_options)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_slave_connection_options_return
     (*slave_connection_options)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_slave_thread_options_return
     (*slave_thread_options)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_slave_thread_option_return
     (*slave_thread_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_group_replication_return
     (*group_replication)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_prepared_statement_return
     (*prepared_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_execute_statement_return
     (*execute_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_execute_var_list_return
     (*execute_var_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_account_management_statement_return
     (*account_management_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_alter_user_return
     (*alter_user)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_alter_user_tail_return
     (*alter_user_tail)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_user_return
     (*create_user)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_user_tail_return
     (*create_user_tail)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_require_clause_return
     (*require_clause)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_connect_options_return
     (*connect_options)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_account_lock_password_expire_options_return
     (*account_lock_password_expire_options)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_drop_user_return
     (*drop_user)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_parse_grant_return
     (*parse_grant)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_grant_return
     (*grant)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_grant_proxy_return
     (*grant_proxy)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_rename_user_return
     (*rename_user)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_revoke_statement_return
     (*revoke_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_privilege_target_return
     (*privilege_target)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_set_password_return
     (*set_password)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_grant_object_type_return
     (*grant_object_type)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_grant_privileges_return
     (*grant_privileges)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_privilege_type_return
     (*privilege_type)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_privilege_level_return
     (*privilege_level)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_require_list_return
     (*require_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_require_list_element_return
     (*require_list_element)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_grant_option_return
     (*grant_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_table_administration_statement_return
     (*table_administration_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_check_option_return
     (*check_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_repair_option_return
     (*repair_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_install_uninstall_statment_return
     (*install_uninstall_statment)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_set_statement_return
     (*set_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_option_value_no_option_type_return
     (*option_value_no_option_type)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_option_value_following_option_type_return
     (*option_value_following_option_type)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_set_expression_or_default_return
     (*set_expression_or_default)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_option_value_list_return
     (*option_value_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_option_value_return
     (*option_value)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_show_statement_return
     (*show_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_non_blocking_return
     (*non_blocking)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_from_or_in_return
     (*from_or_in)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_in_db_return
     (*in_db)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_profile_type_return
     (*profile_type)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_other_administrative_statement_return
     (*other_administrative_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_key_cache_list_or_parts_return
     (*key_cache_list_or_parts)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_key_cache_list_return
     (*key_cache_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_assign_to_keycache_return
     (*assign_to_keycache)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_assign_to_keycache_partition_return
     (*assign_to_keycache_partition)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_cache_keys_spec_return
     (*cache_keys_spec)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_key_usage_element_return
     (*key_usage_element)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_flush_option_return
     (*flush_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_log_type_return
     (*log_type)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_flush_tables_return
     (*flush_tables)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_flush_tables_options_return
     (*flush_tables_options)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_load_table_index_list_return
     (*load_table_index_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_load_table_index_partion_return
     (*load_table_index_partion)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_reset_option_return
     (*reset_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_utility_statement_return
     (*utility_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_describe_command_return
     (*describe_command)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_explainable_statement_return
     (*explainable_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_use_command_return
     (*use_command)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_expression_return
     (*expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_logical_or_expression_return
     (*logical_or_expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_logical_xor_expression_return
     (*logical_xor_expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_logical_and_expression_return
     (*logical_and_expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_logical_not_expression_return
     (*logical_not_expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_boolean_primary_expression_return
     (*boolean_primary_expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_predicate_return
     (*predicate)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_predicate_in_return
     (*predicate_in)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_bitwise_or_expression_return
     (*bitwise_or_expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_bitwise_and_expression_return
     (*bitwise_and_expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_shift_expression_return
     (*shift_expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_additive_expression_return
     (*additive_expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_multiplicative_expression_return
     (*multiplicative_expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_bitwise_xor_expression_return
     (*bitwise_xor_expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_concat_expression_return
     (*concat_expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_unary_expression_return
     (*unary_expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_not_expression_return
     (*not_expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_interval_expression_return
     (*interval_expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_interval_function_return
     (*interval_function)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_interval_time_span_return
     (*interval_time_span)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_primary_return
     (*primary)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_expression_with_nested_parentheses_return
     (*expression_with_nested_parentheses)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_comparison_operator_return
     (*comparison_operator)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_multiplication_operator_return
     (*multiplication_operator)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_runtime_function_call_return
     (*runtime_function_call)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_runtime_function_call_expression_return
     (*runtime_function_call_expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_time_function_parameters_return
     (*time_function_parameters)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_fractional_precision_return
     (*fractional_precision)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_weight_string_levels_return
     (*weight_string_levels)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_weight_string_level_list_item_return
     (*weight_string_level_list_item)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_date_time_type_return
     (*date_time_type)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_trim_function_return
     (*trim_function)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_substring_function_return
     (*substring_function)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_geometry_function_return
     (*geometry_function)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_aggregate_function_return
     (*aggregate_function)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_in_aggregate_expression_return
     (*in_aggregate_expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_count_function_return
     (*count_function)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_udf_call_return
     (*udf_call)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_udf_call_expression_return
     (*udf_call_expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_stored_function_call_return
     (*stored_function_call)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_stored_function_call_expression_return
     (*stored_function_call_expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_aliased_expression_list_return
     (*aliased_expression_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_aliased_expression_return
     (*aliased_expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_variable_return
     (*variable)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_user_variable_return
     (*user_variable)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_system_variable_return
     (*system_variable)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_variable_name_return
     (*variable_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_match_expression_return
     (*match_expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_case_expression_return
     (*case_expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_when_expression_return
     (*when_expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_then_expression_return
     (*then_expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_else_expression_return
     (*else_expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_cast_expression_return
     (*cast_expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_cast_type_return
     (*cast_type)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_encoding_return
     (*encoding)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_charset_return
     (*charset)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_not_rule_return
     (*not_rule)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_not2_rule_return
     (*not2_rule)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_or_rule_return
     (*or_rule)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_xor_rule_return
     (*xor_rule)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_and_rule_return
     (*and_rule)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_interval_return
     (*interval)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_interval_unit_return
     (*interval_unit)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_interval_timestamp_unit_return
     (*interval_timestamp_unit)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_expression_list_with_parentheses_return
     (*expression_list_with_parentheses)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_optional_expression_list_with_parentheses_return
     (*optional_expression_list_with_parentheses)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_expression_list_return
     (*expression_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_expression_list_with_direction_return
     (*expression_list_with_direction)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_channel_return
     (*channel)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_compound_statement_return
     (*compound_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_compound_statement_list_return
     (*compound_statement_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_label_return
     (*label)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_label_identifier_return
     (*label_identifier)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_begin_end_block_return
     (*begin_end_block)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_loop_block_return
     (*loop_block)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_repeat_until_block_return
     (*repeat_until_block)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_while_do_block_return
     (*while_do_block)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_declarations_return
     (*declarations)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_variable_declaration_return
     (*variable_declaration)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_condition_declaration_return
     (*condition_declaration)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_sp_condition_return
     (*sp_condition)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_sqlstate_return
     (*sqlstate)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_cursor_declaration_return
     (*cursor_declaration)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_handler_declaration_return
     (*handler_declaration)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_handler_condition_return
     (*handler_condition)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_case_statement_return
     (*case_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_then_statement_return
     (*then_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_else_statement_return
     (*else_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_if_statement_return
     (*if_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_if_body_return
     (*if_body)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_iterate_statement_return
     (*iterate_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_leave_statement_return
     (*leave_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_return_statement_return
     (*return_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_get_diagnostics_return
     (*get_diagnostics)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_signal_allowed_expression_return
     (*signal_allowed_expression)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_statement_information_item_return
     (*statement_information_item)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_condition_information_item_return
     (*condition_information_item)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_signal_information_item_name_return
     (*signal_information_item_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_signal_statement_return
     (*signal_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_resignal_statement_return
     (*resignal_statement)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_signal_information_item_return
     (*signal_information_item)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_cursor_close_return
     (*cursor_close)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_cursor_fetch_return
     (*cursor_fetch)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_cursor_open_return
     (*cursor_open)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_schedule_return
     (*schedule)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_database_option_return
     (*database_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_column_definition_return
     (*column_definition)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_field_spec_return
     (*field_spec)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_field_def_return
     (*field_def)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_field_def_tail_return
     (*field_def_tail)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_attribute_return
     (*attribute)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_gcol_attribute_return
     (*gcol_attribute)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_reference_definition_return
     (*reference_definition)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_index_columns_return
     (*index_columns)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_index_column_return
     (*index_column)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_index_type_return
     (*index_type)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_normal_index_option_return
     (*normal_index_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_fulltext_index_option_return
     (*fulltext_index_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_spatial_index_option_return
     (*spatial_index_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_all_key_option_return
     (*all_key_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_reference_option_return
     (*reference_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_data_type_return
     (*data_type)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_data_type_definition_return
     (*data_type_definition)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_data_type_elements_return
     (*data_type_elements)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_field_length_return
     (*field_length)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_field_options_return
     (*field_options)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_string_binary_return
     (*string_binary)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_ascii_return
     (*ascii)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_unicode_return
     (*unicode)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_type_datetime_precision_return
     (*type_datetime_precision)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_charset_name_return
     (*charset_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_charset_name_or_default_return
     (*charset_name_or_default)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_collation_name_return
     (*collation_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_collation_name_or_default_return
     (*collation_name_or_default)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_spatial_type_return
     (*spatial_type)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_alter_table_options_return
     (*alter_table_options)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_table_options_return
     (*create_table_options)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_create_table_option_return
     (*create_table_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_partitioning_return
     (*partitioning)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_partition_key_algorithm_return
     (*partition_key_algorithm)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_partition_definitions_return
     (*partition_definitions)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_partition_definition_return
     (*partition_definition)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_partition_option_return
     (*partition_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_subpartition_definition_return
     (*subpartition_definition)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_partition_value_list_return
     (*partition_value_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_definer_clause_return
     (*definer_clause)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_if_exists_return
     (*if_exists)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_if_not_exists_return
     (*if_not_exists)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_procedure_parameter_return
     (*procedure_parameter)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_function_parameter_return
     (*function_parameter)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_schema_identifier_pair_return
     (*schema_identifier_pair)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_view_identifier_list_return
     (*view_identifier_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_field_name_list_return
     (*field_name_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_column_assignment_list_with_default_return
     (*column_assignment_list_with_default)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_column_assignment_with_default_return
     (*column_assignment_with_default)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_charset_clause_return
     (*charset_clause)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_fields_clause_return
     (*fields_clause)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_field_term_return
     (*field_term)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_lines_clause_return
     (*lines_clause)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_line_term_return
     (*line_term)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_user_list_return
     (*user_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_grant_list_return
     (*grant_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_grant_user_return
     (*grant_user)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_user_return
     (*user)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_like_clause_return
     (*like_clause)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_like_or_where_return
     (*like_or_where)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_online_option_return
     (*online_option)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_no_write_to_bin_log_return
     (*no_write_to_bin_log)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_use_partition_return
     (*use_partition)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_column_name_return
     (*column_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_column_ref_return
     (*column_ref)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_column_ref_variants_return
     (*column_ref_variants)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_column_internal_ref_return
     (*column_internal_ref)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_column_ref_with_wildcard_return
     (*column_ref_with_wildcard)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_column_ref_with_wildcard2_return
     (*column_ref_with_wildcard2)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_index_name_return
     (*index_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_index_ref_return
     (*index_ref)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_table_wild_return
     (*table_wild)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_schema_name_return
     (*schema_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_schema_ref_return
     (*schema_ref)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_procedure_name_return
     (*procedure_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_procedure_ref_return
     (*procedure_ref)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_function_name_return
     (*function_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_function_ref_return
     (*function_ref)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_trigger_name_return
     (*trigger_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_trigger_ref_return
     (*trigger_ref)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_view_name_return
     (*view_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_view_ref_return
     (*view_ref)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_tablespace_name_return
     (*tablespace_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_tablespace_ref_return
     (*tablespace_ref)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_logfile_group_name_return
     (*logfile_group_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_logfile_group_ref_return
     (*logfile_group_ref)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_event_name_return
     (*event_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_event_ref_return
     (*event_ref)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_udf_name_return
     (*udf_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_server_name_return
     (*server_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_server_ref_return
     (*server_ref)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_engine_ref_return
     (*engine_ref)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_table_name_return
     (*table_name)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_filter_table_ref_return
     (*filter_table_ref)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_table_ref_with_wildcard_return
     (*table_ref_with_wildcard)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_table_ref_return
     (*table_ref)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_table_ref_no_db_return
     (*table_ref_no_db)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_table_name_variants_return
     (*table_name_variants)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_table_ref_list_return
     (*table_ref_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_table_ref_list_with_wildcard_return
     (*table_ref_list_with_wildcard)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_pure_identifier_return
     (*pure_identifier)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_identifier_return
     (*identifier)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_identifier_list_return
     (*identifier_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_identifier_list_with_parentheses_return
     (*identifier_list_with_parentheses)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_qualified_identifier_return
     (*qualified_identifier)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_ulong_number_return
     (*ulong_number)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_real_ulong_number_return
     (*real_ulong_number)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_ulonglong_number_return
     (*ulonglong_number)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_real_ulonglong_number_return
     (*real_ulonglong_number)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_string_list_return
     (*string_list)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_text_string_return
     (*text_string)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_text_string_no_linebreak_return
     (*text_string_no_linebreak)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_literal_return
     (*literal)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_signed_literal_return
     (*signed_literal)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_string_literal_return
     (*string_literal)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_string_return
     (*string)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_num_literal_return
     (*num_literal)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_bool_literal_return
     (*bool_literal)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_null_literal_return
     (*null_literal)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_temporal_literal_return
     (*temporal_literal)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_integer_type_return
     (*integer_type)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_real_literal_return
     (*real_literal)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_float_options_return
     (*float_options)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_precision_return
     (*precision)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_nchar_literal_return
     (*nchar_literal)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_varchar_literal_return
     (*varchar_literal)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_nvarchar_literal_return
     (*nvarchar_literal)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_text_or_identifier_return
     (*text_or_identifier)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_size_number_return
     (*size_number)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_parentheses_return
     (*parentheses)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_equal_return
     (*equal)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_option_type_return
     (*option_type)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_keyword_return
     (*keyword)	(struct MySQLParser_Ctx_struct * ctx);

     MySQLParser_keyword_sp_return
     (*keyword_sp)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred1_MySQL)	(struct MySQLParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred2_MySQL)	(struct MySQLParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct MySQLParser_Ctx_struct * ctx);
    void	    (*free)   (struct MySQLParser_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pMySQLParser MySQLParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pMySQLParser MySQLParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define ACCOUNT_SYMBOL      4
#define ASCII_SYMBOL      5
#define ALWAYS_SYMBOL      6
#define BACKUP_SYMBOL      7
#define BEGIN_SYMBOL      8
#define BYTE_SYMBOL      9
#define CACHE_SYMBOL      10
#define CHARSET_SYMBOL      11
#define CHECKSUM_SYMBOL      12
#define CLOSE_SYMBOL      13
#define COMMENT_SYMBOL      14
#define COMMIT_SYMBOL      15
#define CONTAINS_SYMBOL      16
#define DEALLOCATE_SYMBOL      17
#define DO_SYMBOL      18
#define END_SYMBOL      19
#define EXECUTE_SYMBOL      20
#define FLUSH_SYMBOL      21
#define FOLLOWS_SYMBOL      22
#define FORMAT_SYMBOL      23
#define GROUP_REPLICATION_SYMBOL      24
#define HANDLER_SYMBOL      25
#define HELP_SYMBOL      26
#define HOST_SYMBOL      27
#define INSTALL_SYMBOL      28
#define LANGUAGE_SYMBOL      29
#define NO_SYMBOL      30
#define OPEN_SYMBOL      31
#define OPTIONS_SYMBOL      32
#define OWNER_SYMBOL      33
#define PARSER_SYMBOL      34
#define PARTITION_SYMBOL      35
#define PORT_SYMBOL      36
#define PRECEDES_SYMBOL      37
#define PREPARE_SYMBOL      38
#define REMOVE_SYMBOL      39
#define REPAIR_SYMBOL      40
#define RESET_SYMBOL      41
#define RESTORE_SYMBOL      42
#define ROLLBACK_SYMBOL      43
#define SAVEPOINT_SYMBOL      44
#define SECURITY_SYMBOL      45
#define SERVER_SYMBOL      46
#define SIGNED_SYMBOL      47
#define SLAVE_SYMBOL      48
#define SOCKET_SYMBOL      49
#define SONAME_SYMBOL      50
#define START_SYMBOL      51
#define STOP_SYMBOL      52
#define TRUNCATE_SYMBOL      53
#define UNICODE_SYMBOL      54
#define UNINSTALL_SYMBOL      55
#define UPGRADE_SYMBOL      56
#define WRAPPER_SYMBOL      57
#define XA_SYMBOL      58
#define ACTION_SYMBOL      59
#define ADDDATE_SYMBOL      60
#define AFTER_SYMBOL      61
#define AGAINST_SYMBOL      62
#define AGGREGATE_SYMBOL      63
#define ALGORITHM_SYMBOL      64
#define ANALYZE_SYMBOL      65
#define ANY_SYMBOL      66
#define AT_SYMBOL      67
#define AUTHORS_SYMBOL      68
#define AUTO_INCREMENT_SYMBOL      69
#define AUTOEXTEND_SIZE_SYMBOL      70
#define AVG_ROW_LENGTH_SYMBOL      71
#define AVG_SYMBOL      72
#define BINLOG_SYMBOL      73
#define BIT_SYMBOL      74
#define BLOCK_SYMBOL      75
#define BOOL_SYMBOL      76
#define BOOLEAN_SYMBOL      77
#define BTREE_SYMBOL      78
#define CASCADED_SYMBOL      79
#define CATALOG_NAME_SYMBOL      80
#define CHAIN_SYMBOL      81
#define CHANGED_SYMBOL      82
#define CHANNEL_SYMBOL      83
#define CIPHER_SYMBOL      84
#define CLIENT_SYMBOL      85
#define CLASS_ORIGIN_SYMBOL      86
#define COALESCE_SYMBOL      87
#define CODE_SYMBOL      88
#define COLLATION_SYMBOL      89
#define COLUMN_NAME_SYMBOL      90
#define COLUMN_FORMAT_SYMBOL      91
#define COLUMNS_SYMBOL      92
#define COMMITTED_SYMBOL      93
#define COMPACT_SYMBOL      94
#define COMPLETION_SYMBOL      95
#define COMPRESSED_SYMBOL      96
#define COMPRESSION_SYMBOL      97
#define CONCURRENT_SYMBOL      98
#define CONNECTION_SYMBOL      99
#define CONSISTENT_SYMBOL      100
#define CONSTRAINT_CATALOG_SYMBOL      101
#define CONSTRAINT_SCHEMA_SYMBOL      102
#define CONSTRAINT_NAME_SYMBOL      103
#define CONTEXT_SYMBOL      104
#define CONTRIBUTORS_SYMBOL      105
#define CPU_SYMBOL      106
#define CUBE_SYMBOL      107
#define CURRENT_SYMBOL      108
#define CURSOR_NAME_SYMBOL      109
#define DATA_SYMBOL      110
#define DATAFILE_SYMBOL      111
#define DATETIME_SYMBOL      112
#define DATE_SYMBOL      113
#define DAY_SYMBOL      114
#define DEFAULT_AUTH_SYMBOL      115
#define DEFINER_SYMBOL      116
#define DELAY_KEY_WRITE_SYMBOL      117
#define DES_KEY_FILE_SYMBOL      118
#define DIAGNOSTICS_SYMBOL      119
#define DIRECTORY_SYMBOL      120
#define DISABLE_SYMBOL      121
#define DISCARD_SYMBOL      122
#define DISK_SYMBOL      123
#define DUMPFILE_SYMBOL      124
#define DUPLICATE_SYMBOL      125
#define DYNAMIC_SYMBOL      126
#define ENDS_SYMBOL      127
#define ENUM_SYMBOL      128
#define ENGINE_SYMBOL      129
#define ENGINES_SYMBOL      130
#define ERROR_SYMBOL      131
#define ERRORS_SYMBOL      132
#define ESCAPE_SYMBOL      133
#define EVENT_SYMBOL      134
#define EVENTS_SYMBOL      135
#define EVERY_SYMBOL      136
#define EXPANSION_SYMBOL      137
#define EXPORT_SYMBOL      138
#define EXTENDED_SYMBOL      139
#define EXTENT_SIZE_SYMBOL      140
#define FAULTS_SYMBOL      141
#define FAST_SYMBOL      142
#define FOUND_SYMBOL      143
#define ENABLE_SYMBOL      144
#define FULL_SYMBOL      145
#define FILE_SYMBOL      146
#define FILE_BLOCK_SIZE_SYMBOL      147
#define FILTER_SYMBOL      148
#define FIRST_SYMBOL      149
#define FIXED_SYMBOL      150
#define GENERAL_SYMBOL      151
#define GEOMETRY_SYMBOL      152
#define GEOMETRYCOLLECTION_SYMBOL      153
#define GET_FORMAT_SYMBOL      154
#define GRANTS_SYMBOL      155
#define GLOBAL_SYMBOL      156
#define HASH_SYMBOL      157
#define HOSTS_SYMBOL      158
#define HOUR_SYMBOL      159
#define IDENTIFIED_SYMBOL      160
#define IGNORE_SERVER_IDS_SYMBOL      161
#define INVOKER_SYMBOL      162
#define IMPORT_SYMBOL      163
#define INDEXES_SYMBOL      164
#define INITIAL_SIZE_SYMBOL      165
#define INNODB_SYMBOL      166
#define IO_SYMBOL      167
#define IPC_SYMBOL      168
#define ISOLATION_SYMBOL      169
#define ISSUER_SYMBOL      170
#define INSERT_METHOD_SYMBOL      171
#define JSON_SYMBOL      172
#define KEY_BLOCK_SIZE_SYMBOL      173
#define LAST_SYMBOL      174
#define LEAVES_SYMBOL      175
#define LESS_SYMBOL      176
#define LEVEL_SYMBOL      177
#define LINESTRING_SYMBOL      178
#define LIST_SYMBOL      179
#define LOCAL_SYMBOL      180
#define LOCKS_SYMBOL      181
#define LOGFILE_SYMBOL      182
#define LOGS_SYMBOL      183
#define MAX_ROWS_SYMBOL      184
#define MASTER_SYMBOL      185
#define MASTER_HEARTBEAT_PERIOD_SYMBOL      186
#define MASTER_HOST_SYMBOL      187
#define MASTER_PORT_SYMBOL      188
#define MASTER_LOG_FILE_SYMBOL      189
#define MASTER_LOG_POS_SYMBOL      190
#define MASTER_USER_SYMBOL      191
#define MASTER_PASSWORD_SYMBOL      192
#define MASTER_SERVER_ID_SYMBOL      193
#define MASTER_CONNECT_RETRY_SYMBOL      194
#define MASTER_RETRY_COUNT_SYMBOL      195
#define MASTER_DELAY_SYMBOL      196
#define MASTER_SSL_SYMBOL      197
#define MASTER_SSL_CA_SYMBOL      198
#define MASTER_SSL_CAPATH_SYMBOL      199
#define MASTER_SSL_CERT_SYMBOL      200
#define MASTER_SSL_CIPHER_SYMBOL      201
#define MASTER_SSL_CRL_SYMBOL      202
#define MASTER_SSL_CRLPATH_SYMBOL      203
#define MASTER_SSL_KEY_SYMBOL      204
#define MASTER_AUTO_POSITION_SYMBOL      205
#define MAX_CONNECTIONS_PER_HOUR_SYMBOL      206
#define MAX_QUERIES_PER_HOUR_SYMBOL      207
#define MAX_STATEMENT_TIME_SYMBOL      208
#define MAX_SIZE_SYMBOL      209
#define MAX_UPDATES_PER_HOUR_SYMBOL      210
#define MAX_USER_CONNECTIONS_SYMBOL      211
#define MEDIUM_SYMBOL      212
#define MEMORY_SYMBOL      213
#define MERGE_SYMBOL      214
#define MESSAGE_TEXT_SYMBOL      215
#define MICROSECOND_SYMBOL      216
#define MIGRATE_SYMBOL      217
#define MINUTE_SYMBOL      218
#define MIN_ROWS_SYMBOL      219
#define MODIFY_SYMBOL      220
#define MODE_SYMBOL      221
#define MONTH_SYMBOL      222
#define MULTILINESTRING_SYMBOL      223
#define MULTIPOINT_SYMBOL      224
#define MULTIPOLYGON_SYMBOL      225
#define MUTEX_SYMBOL      226
#define MYSQL_ERRNO_SYMBOL      227
#define NAME_SYMBOL      228
#define NAMES_SYMBOL      229
#define NATIONAL_SYMBOL      230
#define NCHAR_SYMBOL      231
#define NDBCLUSTER_SYMBOL      232
#define NEVER_SYMBOL      233
#define NEXT_SYMBOL      234
#define NEW_SYMBOL      235
#define NO_WAIT_SYMBOL      236
#define NODEGROUP_SYMBOL      237
#define NONE_SYMBOL      238
#define NUMBER_SYMBOL      239
#define NVARCHAR_SYMBOL      240
#define OFFSET_SYMBOL      241
#define OLD_PASSWORD_SYMBOL      242
#define ONE_SHOT_SYMBOL      243
#define ONE_SYMBOL      244
#define PACK_KEYS_SYMBOL      245
#define PAGE_SYMBOL      246
#define PARTIAL_SYMBOL      247
#define PARTITIONING_SYMBOL      248
#define PARTITIONS_SYMBOL      249
#define PASSWORD_SYMBOL      250
#define PHASE_SYMBOL      251
#define PLUGIN_DIR_SYMBOL      252
#define PLUGIN_SYMBOL      253
#define PLUGINS_SYMBOL      254
#define POINT_SYMBOL      255
#define POLYGON_SYMBOL      256
#define PRESERVE_SYMBOL      257
#define PREV_SYMBOL      258
#define PRIVILEGES_SYMBOL      259
#define PROCESS_SYMBOL      260
#define PROCESSLIST_SYMBOL      261
#define PROFILE_SYMBOL      262
#define PROFILES_SYMBOL      263
#define PROXY_SYMBOL      264
#define QUARTER_SYMBOL      265
#define QUERY_SYMBOL      266
#define QUICK_SYMBOL      267
#define READ_ONLY_SYMBOL      268
#define REBUILD_SYMBOL      269
#define RECOVER_SYMBOL      270
#define REDO_BUFFER_SIZE_SYMBOL      271
#define REDOFILE_SYMBOL      272
#define REDUNDANT_SYMBOL      273
#define RELAY_SYMBOL      274
#define RELAYLOG_SYMBOL      275
#define RELAY_LOG_FILE_SYMBOL      276
#define RELAY_LOG_POS_SYMBOL      277
#define RELAY_THREAD_SYMBOL      278
#define RELOAD_SYMBOL      279
#define REORGANIZE_SYMBOL      280
#define REPEATABLE_SYMBOL      281
#define REPLICATION_SYMBOL      282
#define REPLICATE_DO_DB_SYMBOL      283
#define REPLICATE_IGNORE_DB_SYMBOL      284
#define REPLICATE_DO_TABLE_SYMBOL      285
#define REPLICATE_IGNORE_TABLE_SYMBOL      286
#define REPLICATE_WILD_DO_TABLE_SYMBOL      287
#define REPLICATE_WILD_IGNORE_TABLE_SYMBOL      288
#define REPLICATE_REWRITE_DB_SYMBOL      289
#define RESUME_SYMBOL      290
#define RETURNED_SQLSTATE_SYMBOL      291
#define RETURNS_SYMBOL      292
#define REVERSE_SYMBOL      293
#define ROLLUP_SYMBOL      294
#define ROUTINE_SYMBOL      295
#define ROWS_SYMBOL      296
#define ROW_COUNT_SYMBOL      297
#define ROW_FORMAT_SYMBOL      298
#define ROW_SYMBOL      299
#define RTREE_SYMBOL      300
#define SCHEDULE_SYMBOL      301
#define SCHEMA_NAME_SYMBOL      302
#define SECOND_SYMBOL      303
#define SERIAL_SYMBOL      304
#define SERIALIZABLE_SYMBOL      305
#define SESSION_SYMBOL      306
#define SIMPLE_SYMBOL      307
#define SHARE_SYMBOL      308
#define SHUTDOWN_SYMBOL      309
#define SLOW_SYMBOL      310
#define SNAPSHOT_SYMBOL      311
#define SOUNDS_SYMBOL      312
#define SOURCE_SYMBOL      313
#define SQL_AFTER_GTIDS_SYMBOL      314
#define SQL_AFTER_MTS_GAPS_SYMBOL      315
#define SQL_BEFORE_GTIDS_SYMBOL      316
#define SQL_CACHE_SYMBOL      317
#define SQL_BUFFER_RESULT_SYMBOL      318
#define SQL_NO_CACHE_SYMBOL      319
#define SQL_THREAD_SYMBOL      320
#define STACKED_SYMBOL      321
#define STARTS_SYMBOL      322
#define STATS_AUTO_RECALC_SYMBOL      323
#define STATS_PERSISTENT_SYMBOL      324
#define STATS_SAMPLE_PAGES_SYMBOL      325
#define STATUS_SYMBOL      326
#define STORAGE_SYMBOL      327
#define STRING_SYMBOL      328
#define SUBCLASS_ORIGIN_SYMBOL      329
#define SUBDATE_SYMBOL      330
#define SUBJECT_SYMBOL      331
#define SUBPARTITION_SYMBOL      332
#define SUBPARTITIONS_SYMBOL      333
#define SUPER_SYMBOL      334
#define SUSPEND_SYMBOL      335
#define SWAPS_SYMBOL      336
#define SWITCHES_SYMBOL      337
#define TABLE_NAME_SYMBOL      338
#define TABLES_SYMBOL      339
#define TABLE_CHECKSUM_SYMBOL      340
#define TABLESPACE_SYMBOL      341
#define TEMPORARY_SYMBOL      342
#define TEMPTABLE_SYMBOL      343
#define TEXT_SYMBOL      344
#define THAN_SYMBOL      345
#define TRANSACTION_SYMBOL      346
#define TRIGGERS_SYMBOL      347
#define TIMESTAMP_SYMBOL      348
#define TIMESTAMP_ADD_SYMBOL      349
#define TIMESTAMP_DIFF_SYMBOL      350
#define TIME_SYMBOL      351
#define TYPES_SYMBOL      352
#define TYPE_SYMBOL      353
#define UDF_RETURNS_SYMBOL      354
#define FUNCTION_SYMBOL      355
#define UNCOMMITTED_SYMBOL      356
#define UNDEFINED_SYMBOL      357
#define UNDO_BUFFER_SIZE_SYMBOL      358
#define UNDOFILE_SYMBOL      359
#define UNKNOWN_SYMBOL      360
#define UNTIL_SYMBOL      361
#define USER_RESOURCES_SYMBOL      362
#define USER_SYMBOL      363
#define USE_FRM_SYMBOL      364
#define VARIABLES_SYMBOL      365
#define VIEW_SYMBOL      366
#define VALUE_SYMBOL      367
#define WARNINGS_SYMBOL      368
#define WAIT_SYMBOL      369
#define WEEK_SYMBOL      370
#define WORK_SYMBOL      371
#define WEIGHT_STRING_SYMBOL      372
#define X509_SYMBOL      373
#define XID_SYMBOL      374
#define XML_SYMBOL      375
#define YEAR_SYMBOL      376
#define ACCESSIBLE_SYMBOL      377
#define ADD_SYMBOL      378
#define ALL_SYMBOL      379
#define ALTER_SYMBOL      380
#define ALTER_TABLE_ITEM_TOKEN      381
#define ANALYSE_SYMBOL      382
#define AND_SYMBOL      383
#define ASC_SYMBOL      384
#define ASENSITIVE_SYMBOL      385
#define ASSIGN_OPERATOR      386
#define AS_SYMBOL      387
#define AT_AT_SIGN_SYMBOL      388
#define AT_SIGN_SYMBOL      389
#define AT_TEXT_SUFFIX      390
#define BACK_TICK      391
#define BACK_TICK_QUOTED_ID      392
#define BEFORE_SYMBOL      393
#define BETWEEN_SYMBOL      394
#define BIGINT_SYMBOL      395
#define BINARY_SYMBOL      396
#define BIN_NUMBER      397
#define BIN_NUM_SYMBOL      398
#define BITWISE_AND_OPERATOR      399
#define BITWISE_NOT_OPERATOR      400
#define BITWISE_OR_OPERATOR      401
#define BITWISE_XOR_OPERATOR      402
#define BIT_AND_SYMBOL      403
#define BIT_OR_SYMBOL      404
#define BIT_XOR_SYMBOL      405
#define BLOB_SYMBOL      406
#define BLOCK_COMMENT      407
#define BOTH_SYMBOL      408
#define BY_SYMBOL      409
#define CALL_SYMBOL      410
#define CASCADE_SYMBOL      411
#define CASE_SYMBOL      412
#define CAST_SYMBOL      413
#define CHANGE_MASTER_OPTIONS_TOKEN      414
#define CHANGE_SYMBOL      415
#define CHARACTER_SYMBOL      416
#define CHAR_SYMBOL      417
#define CHECK_SYMBOL      418
#define CLOSE_CURLY_SYMBOL      419
#define CLOSE_PAR_SYMBOL      420
#define COLLATE_SYMBOL      421
#define COLON_SYMBOL      422
#define COLUMN_ASSIGNMENT_LIST_TOKEN      423
#define COLUMN_INTERNAL_REF_TOKEN      424
#define COLUMN_NAME_TOKEN      425
#define COLUMN_REF_TOKEN      426
#define COLUMN_SYMBOL      427
#define COMMA_SYMBOL      428
#define COMMENT_RULE      429
#define CONCAT_PIPES_SYMBOL      430
#define CONDITION_SYMBOL      431
#define CONSTRAINT_SYMBOL      432
#define CONTINUE_SYMBOL      433
#define CONVERT_SYMBOL      434
#define COUNT_SYMBOL      435
#define CREATE_ITEM_TOKEN      436
#define CREATE_SYMBOL      437
#define CROSS_SYMBOL      438
#define CURDATE_SYMBOL      439
#define CURRENT_TIMESTAMP_SYMBOL      440
#define CURRENT_USER_SYMBOL      441
#define CURSOR_SYMBOL      442
#define CURTIME_SYMBOL      443
#define DASHDASH_COMMENT      444
#define DATABASES_SYMBOL      445
#define DATABASE_SYMBOL      446
#define DATA_TYPE_TOKEN      447
#define DATE_ADD_INTERVAL_SYMBOL      448
#define DATE_ADD_SYMBOL      449
#define DATE_SUB_INTERVAL_SYMBOL      450
#define DATE_SUB_SYMBOL      451
#define DAYOFMONTH_SYMBOL      452
#define DAY_HOUR_SYMBOL      453
#define DAY_MICROSECOND_SYMBOL      454
#define DAY_MINUTE_SYMBOL      455
#define DAY_SECOND_SYMBOL      456
#define DECIMAL_NUMBER      457
#define DECIMAL_NUM_SYMBOL      458
#define DECIMAL_SYMBOL      459
#define DECLARE_SYMBOL      460
#define DEC_SYMBOL      461
#define DEFAULT_SYMBOL      462
#define DELAYED_SYMBOL      463
#define DELETE_SYMBOL      464
#define DESCRIBE_SYMBOL      465
#define DESC_SYMBOL      466
#define DETERMINISTIC_SYMBOL      467
#define DIGIT      468
#define DIGITS      469
#define DISTINCTROW_SYMBOL      470
#define DISTINCT_SYMBOL      471
#define DIV_OPERATOR      472
#define DIV_SYMBOL      473
#define DOT_SYMBOL      474
#define DOUBLE_DASH      475
#define DOUBLE_QUOTE      476
#define DOUBLE_QUOTED_TEXT      477
#define DOUBLE_SYMBOL      478
#define DROP_SYMBOL      479
#define DUAL_SYMBOL      480
#define EACH_SYMBOL      481
#define ELSEIF_SYMBOL      482
#define ELSE_SYMBOL      483
#define ENCLOSED_SYMBOL      484
#define END_OF_INPUT_SYMBOL      485
#define ENGINE_REF_TOKEN      486
#define EQUAL_OPERATOR      487
#define ESCAPED_SYMBOL      488
#define ESCAPE_OPERATOR      489
#define EVENT_NAME_TOKEN      490
#define EVENT_REF_TOKEN      491
#define EXCHANGE_SYMBOL      492
#define EXISTS_SYMBOL      493
#define EXIT_SYMBOL      494
#define EXPIRE_SYMBOL      495
#define EXPLAIN_SYMBOL      496
#define EXPRESSION_TOKEN      497
#define EXTRACT_SYMBOL      498
#define FALSE_SYMBOL      499
#define FETCH_SYMBOL      500
#define FIELDS_SYMBOL      501
#define FLOAT4_SYMBOL      502
#define FLOAT8_SYMBOL      503
#define FLOAT_NUMBER      504
#define FLOAT_SYMBOL      505
#define FORCE_SYMBOL      506
#define FOREIGN_SYMBOL      507
#define FOR_SYMBOL      508
#define FRAC_SECOND_SYMBOL      509
#define FROM_SYMBOL      510
#define FULLTEXT_SYMBOL      511
#define FUNCTION_CALL_TOKEN      512
#define FUNCTION_NAME_TOKEN      513
#define FUNCTION_REF_TOKEN      514
#define GENERATED_SYMBOL      515
#define GET_SYMBOL      516
#define GRANT_SYMBOL      517
#define GREATER_OR_EQUAL_OPERATOR      518
#define GREATER_THAN_OPERATOR      519
#define GROUP_CONCAT_SYMBOL      520
#define GROUP_SYMBOL      521
#define HAVING_SYMBOL      522
#define HEXDIGIT      523
#define HEX_NUMBER      524
#define HIGH_PRIORITY_SYMBOL      525
#define HOUR_MICROSECOND_SYMBOL      526
#define HOUR_MINUTE_SYMBOL      527
#define HOUR_SECOND_SYMBOL      528
#define IDENTIFIER      529
#define IF_SYMBOL      530
#define IGNORE_SYMBOL      531
#define INDEX_HINT_LIST_TOKEN      532
#define INDEX_NAME_TOKEN      533
#define INDEX_REF_TOKEN      534
#define INDEX_SYMBOL      535
#define INFILE_SYMBOL      536
#define INNER_SYMBOL      537
#define INOUT_SYMBOL      538
#define INSENSITIVE_SYMBOL      539
#define INSERT_SYMBOL      540
#define INT1_SYMBOL      541
#define INT2_SYMBOL      542
#define INT3_SYMBOL      543
#define INT4_SYMBOL      544
#define INT8_SYMBOL      545
#define INTEGER_SYMBOL      546
#define INTERVAL_SYMBOL      547
#define INTO_SYMBOL      548
#define INT_NUMBER      549
#define INT_SYMBOL      550
#define INVALID_INPUT      551
#define IN_SYMBOL      552
#define IO_AFTER_GTIDS_SYMBOL      553
#define IO_BEFORE_GTIDS_SYMBOL      554
#define IO_THREAD_SYMBOL      555
#define IS_SYMBOL      556
#define ITERATE_SYMBOL      557
#define JOIN_EXPR_TOKEN      558
#define JOIN_SYMBOL      559
#define JSON_SEPARATOR_SYMBOL      560
#define KEYS_SYMBOL      561
#define KEY_CACHE_LIST_TOKEN      562
#define KEY_CACHE_PARTITION_TOKEN      563
#define KEY_SYMBOL      564
#define KILL_SYMBOL      565
#define LABEL_TOKEN      566
#define LEADING_SYMBOL      567
#define LEAVE_SYMBOL      568
#define LEFT_SYMBOL      569
#define LESS_OR_EQUAL_OPERATOR      570
#define LESS_THAN_OPERATOR      571
#define LETTER_WHEN_UNQUOTED      572
#define LETTER_WHEN_UNQUOTED_NO_DIGIT      573
#define LIKE_SYMBOL      574
#define LIMIT_SYMBOL      575
#define LINEAR_SYMBOL      576
#define LINEBREAK      577
#define LINES_SYMBOL      578
#define LOAD_SYMBOL      579
#define LOCALTIMESTAMP_SYMBOL      580
#define LOCALTIME_SYMBOL      581
#define LOCATOR_SYMBOL      582
#define LOCK_SYMBOL      583
#define LOGFILE_GROUP_NAME_TOKEN      584
#define LOGFILE_GROUP_OPTIONS_TOKEN      585
#define LOGFILE_GROUP_REF_TOKEN      586
#define LOGICAL_AND_OPERATOR      587
#define LOGICAL_NOT_OPERATOR      588
#define LOGICAL_OR_OPERATOR      589
#define LONGBLOB_SYMBOL      590
#define LONGTEXT_SYMBOL      591
#define LONG_NUMBER      592
#define LONG_NUM_SYMBOL      593
#define LONG_SYMBOL      594
#define LOOP_SYMBOL      595
#define LOW_PRIORITY_SYMBOL      596
#define MASTER_BIND_SYMBOL      597
#define MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL      598
#define MATCH_SYMBOL      599
#define MAXVALUE_SYMBOL      600
#define MAX_SYMBOL      601
#define MEDIUMBLOB_SYMBOL      602
#define MEDIUMINT_SYMBOL      603
#define MEDIUMTEXT_SYMBOL      604
#define MIDDLEINT_SYMBOL      605
#define MID_SYMBOL      606
#define MINUS_OPERATOR      607
#define MINUTE_MICROSECOND_SYMBOL      608
#define MINUTE_SECOND_SYMBOL      609
#define MIN_SYMBOL      610
#define ML_COMMENT_END      611
#define ML_COMMENT_HEAD      612
#define MODIFIES_SYMBOL      613
#define MOD_OPERATOR      614
#define MOD_SYMBOL      615
#define MULTILINE_COMMENT      616
#define MULT_OPERATOR      617
#define NATURAL_SYMBOL      618
#define NCHAR_STRING_SYMBOL      619
#define NCHAR_TEXT      620
#define NDB_SYMBOL      621
#define NEG_SYMBOL      622
#define NONBLOCKING_SYMBOL      623
#define NOT2_SYMBOL      624
#define NOT_EQUAL2_OPERATOR      625
#define NOT_EQUAL_OPERATOR      626
#define NOT_SYMBOL      627
#define NOW_SYMBOL      628
#define NO_WRITE_TO_BINLOG_SYMBOL      629
#define NULL2_SYMBOL      630
#define NULL_SAFE_EQUAL_OPERATOR      631
#define NULL_SYMBOL      632
#define NUMBER      633
#define NUMERIC_SYMBOL      634
#define OFFLINE_SYMBOL      635
#define ONLINE_SYMBOL      636
#define ONLY_SYMBOL      637
#define ON_SYMBOL      638
#define OPEN_CURLY_SYMBOL      639
#define OPEN_PAR_SYMBOL      640
#define OPTIMIZER_COSTS_SYMBOL      641
#define OPTIMIZE_SYMBOL      642
#define OPTIONALLY_SYMBOL      643
#define OPTION_SYMBOL      644
#define ORDER_SYMBOL      645
#define OR_SYMBOL      646
#define OUTER_SYMBOL      647
#define OUTFILE_SYMBOL      648
#define OUT_SYMBOL      649
#define PARAM_MARKER      650
#define PAR_EXPRESSION_TOKEN      651
#define PLUS_OPERATOR      652
#define POSITION_SYMBOL      653
#define POUND_COMMENT      654
#define PRECISION_SYMBOL      655
#define PRIMARY_SYMBOL      656
#define PRIVILEGE_TARGET_TOKEN      657
#define PROCEDURE_NAME_TOKEN      658
#define PROCEDURE_REF_TOKEN      659
#define PROCEDURE_SYMBOL      660
#define PURGE_SYMBOL      661
#define RANGE_SYMBOL      662
#define READS_SYMBOL      663
#define READ_SYMBOL      664
#define READ_WRITE_SYMBOL      665
#define REAL_SYMBOL      666
#define REFERENCES_SYMBOL      667
#define REGEXP_SYMBOL      668
#define RELEASE_SYMBOL      669
#define RENAME_SYMBOL      670
#define REPEAT_SYMBOL      671
#define REPLACE_SYMBOL      672
#define REQUIRE_SYMBOL      673
#define RESIGNAL_SYMBOL      674
#define RESTRICT_SYMBOL      675
#define RETURN_SYMBOL      676
#define REVOKE_SYMBOL      677
#define RIGHT_SYMBOL      678
#define RLIKE_SYMBOL      679
#define ROUTINE_ALTER_OPTIONS      680
#define ROUTINE_CREATE_OPTIONS      681
#define RUNTIME_FUNCTION_TOKEN      682
#define SCHEMAS_SYMBOL      683
#define SCHEMA_NAME_TOKEN      684
#define SCHEMA_REF_TOKEN      685
#define SCHEMA_SYMBOL      686
#define SECOND_MICROSECOND_SYMBOL      687
#define SELECT_EXPR_TOKEN      688
#define SELECT_SYMBOL      689
#define SEMICOLON_SYMBOL      690
#define SENSITIVE_SYMBOL      691
#define SEPARATOR_SYMBOL      692
#define SERVER_NAME_TOKEN      693
#define SERVER_OPTIONS_SYMBOL      694
#define SERVER_REF_TOKEN      695
#define SESSION_USER_SYMBOL      696
#define SET_SYMBOL      697
#define SET_VAR_SYMBOL      698
#define SHIFT_LEFT_OPERATOR      699
#define SHIFT_RIGHT_OPERATOR      700
#define SHOW_SYMBOL      701
#define SIGNAL_SYMBOL      702
#define SIMPLE_IDENTIFIER      703
#define SINGLE_QUOTE      704
#define SINGLE_QUOTED_TEXT      705
#define SLAVE_THREAD_OPTIONS_TOKEN      706
#define SMALLINT_SYMBOL      707
#define SPATIAL_SYMBOL      708
#define SPECIFIC_SYMBOL      709
#define SQLEXCEPTION_SYMBOL      710
#define SQLSTATE_SYMBOL      711
#define SQLWARNING_SYMBOL      712
#define SQL_BIG_RESULT_SYMBOL      713
#define SQL_CALC_FOUND_ROWS_SYMBOL      714
#define SQL_SMALL_RESULT_SYMBOL      715
#define SQL_SYMBOL      716
#define SQL_TSI_DAY_SYMBOL      717
#define SQL_TSI_FRAC_SECOND_SYMBOL      718
#define SQL_TSI_HOUR_SYMBOL      719
#define SQL_TSI_MINUTE_SYMBOL      720
#define SQL_TSI_MONTH_SYMBOL      721
#define SQL_TSI_QUARTER_SYMBOL      722
#define SQL_TSI_SECOND_SYMBOL      723
#define SQL_TSI_WEEK_SYMBOL      724
#define SQL_TSI_YEAR_SYMBOL      725
#define SSL_SYMBOL      726
#define STARTING_SYMBOL      727
#define STDDEV_POP_SYMBOL      728
#define STDDEV_SAMP_SYMBOL      729
#define STDDEV_SYMBOL      730
#define STD_SYMBOL      731
#define STORED_SYMBOL      732
#define STRAIGHT_JOIN_SYMBOL      733
#define STRING_NO_LINEBREAK_TOKEN      734
#define STRING_TOKEN      735
#define SUBQUERY_TOKEN      736
#define SUBSTRING_SYMBOL      737
#define SUBSTR_SYMBOL      738
#define SUM_SYMBOL      739
#define SYSDATE_SYMBOL      740
#define SYSTEM_USER_SYMBOL      741
#define TABLESPACE_NAME_TOKEN      742
#define TABLESPACE_OPTIONS_TOKEN      743
#define TABLESPACE_REF_TOKEN      744
#define TABLE_NAME_TOKEN      745
#define TABLE_REF_PRIORITY_SYMBOL      746
#define TABLE_REF_TOKEN      747
#define TABLE_SYMBOL      748
#define TERMINATED_SYMBOL      749
#define THEN_SYMBOL      750
#define TINYBLOB_SYMBOL      751
#define TINYINT_SYMBOL      752
#define TINYTEXT_SYMBOL      753
#define TO_SYMBOL      754
#define TRAILING_SYMBOL      755
#define TRIGGER_NAME_TOKEN      756
#define TRIGGER_REF_TOKEN      757
#define TRIGGER_SYMBOL      758
#define TRIM_SYMBOL      759
#define TRUE_SYMBOL      760
#define UDF_CALL_TOKEN      761
#define UDF_NAME_TOKEN      762
#define ULONGLONG_NUMBER      763
#define UNDERLINE_SYMBOL      764
#define UNDERSCORE_CHARSET      765
#define UNDO_SYMBOL      766
#define UNION_SYMBOL      767
#define UNIQUE_SYMBOL      768
#define UNLOCK_SYMBOL      769
#define UNSIGNED_SYMBOL      770
#define UPDATE_SYMBOL      771
#define USAGE_SYMBOL      772
#define USE_SYMBOL      773
#define USING_SYMBOL      774
#define UTC_DATE_SYMBOL      775
#define UTC_TIMESTAMP_SYMBOL      776
#define UTC_TIME_SYMBOL      777
#define VALIDATION_SYMBOL      778
#define VALUES_SYMBOL      779
#define VARBINARY_SYMBOL      780
#define VARCHARACTER_SYMBOL      781
#define VARCHAR_SYMBOL      782
#define VARIANCE_SYMBOL      783
#define VARYING_SYMBOL      784
#define VAR_POP_SYMBOL      785
#define VAR_SAMP_SYMBOL      786
#define VERSION_COMMENT      787
#define VERSION_COMMENT_END      788
#define VERSION_COMMENT_INTRODUCER      789
#define VERSION_COMMENT_START_TOKEN      790
#define VERSION_COMMENT_TAIL      791
#define VIEW_NAME_TOKEN      792
#define VIEW_REF_TOKEN      793
#define VIRTUAL_SYMBOL      794
#define WHEN_SYMBOL      795
#define WHERE_SYMBOL      796
#define WHILE_SYMBOL      797
#define WHITESPACE      798
#define WITHOUT_SYMBOL      799
#define WITH_CUBE_SYMBOL      800
#define WITH_ROLLUP_SYMBOL      801
#define WITH_SYMBOL      802
#define WRITE_SYMBOL      803
#define XA_ID_TOKEN      804
#define XOR_SYMBOL      805
#define YEAR_MONTH_SYMBOL      806
#define ZEROFILL_SYMBOL      807
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for MySQLParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
